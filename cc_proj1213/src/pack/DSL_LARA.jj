/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. DSL_LARA.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  static = true;}PARSER_BEGIN(DSL_LARA)package pack;public class DSL_LARA/*@bgen(jjtree)*/implements DSL_LARATreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTDSL_LARAState jjtree = new JJTDSL_LARAState();

/*@egen*/  public static void main(String args []) throws ParseException  {    DSL_LARA myConverter = new DSL_LARA(System.in);    SimpleNode root = myConverter.Start();    root.dump("");  }}PARSER_END(DSL_LARA)SKIP :{  " "| "\t"| "\n"| "\r"| <    (      "//"    | "#"    | "%" (~[ "{" ]) //FODI ISTO TUDO    )    (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}< DEFAULT >TOKEN [ IGNORE_CASE ] :{  < RULE : "rule" >| < FOREACH : "foreach" >| < OR : "or" >| < AND : "and" >| < XOR : "xor" >| < EACH : "each" >| < DO : "do" >| < STMT : "statement" >| < END : "end" >| < BEGIN : "begin" >| < KEY : "key" >| < TAG : "tag" >| < VAR : "var" >| < SET : "set" >| < MAX : "max" >| < MIN : "min" >| < WITH : "with" >| < IN : "in" >| < WRAP : "wrap" >| < FLOOR : "floor" >| < OVERFLOW : "overflow" >| < ROUND : "round" >| < COMMUTATIVE : "commutative" >| < IR : "ir" >| < OPERATION : "operation" >| < USE : "use" >| < ELSE : "else" >| < LHS : "lhs" >| < CALL : "call" >| < CONFIGURATION : "configuration" >| < IF : "if" >| < INSERT : "insert" >| < BEFORE : "before" >| < AFTER : "after" >| < FLOAT : "float" >| < INT : "int" >| < AROUND : "around" >| < APPLY : "apply" >| < DEPENDENT : "dependent" >| < FPRINTF : "fprintf" >| < PRINT : "print" >| < WARNING : "warning" >| < SCREEN : "screen" >| < FILE : "file" >| < FUNCTION : "function" >| < MODULE : "module" >| < PROGRAM : "program" >| < TYPEDEF : "typedef" >| < FIXED : "fixed" >| < DOUBLE : "double" >| < SINGLE : "single" >| < INT8 : "int8" >| < INT16 : "int16" >| < INT32 : "int32" >| < UINT8 : "uint8" >| < UINT16 : "uint16" >| < UINT32 : "uint32" >| < CHAR : "char" >| < BOOL : "bool" >| < DECOMPOSE : "decompose" >| < TARGETCODE :    "%{"    (      ~[ "}" ]    | "}" ~[ "%" ]    )*    "}%" >}< DEFAULT >TOKEN :{  < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < #DIGIT : [ "0"-"9" ] >| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >| < QUOTED :    "\'"    (      ~[ "\'" ]    | "\\\'"    )+    "\'" >| < NUMBER : (< DIGIT >)+ >| < STRING :    "\""    (      ~[ "\"" ]    | "\\\""    )+    "\"" >}SimpleNode Start() :{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Start */
  try {
/*@egen*/  (    < APPLY > < IDENTIFIER > (":" < IDENTIFIER >)* ";"  )*  (    Rule()  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Rule() :{/*@bgen(jjtree) Rule */
  SimpleNode jjtn000 = new SimpleNode(JJTRULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) Rule */
  try {
/*@egen*/  < RULE > t = < IDENTIFIER >  {    jjtn000.val = t.image;  }  (    Use()  )*  (    Statement()  | InjectCode()  | TypeDef()  )*  (    DataTypeConvRules()  )*  < END >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Use() :{/*@bgen(jjtree) Use */
  SimpleNode jjtn000 = new SimpleNode(JJTUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Use */
  try {
/*@egen*/  < USE > < IDENTIFIER > ";"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Statement()       :{}{  ForEachStatement()| Insert()| Set()| WithStatement() //Diogo pergunta: deixamos os nomes destes statements, mudamos os nomes ou tiramos e pomos s\u00f3 statement gen\u00e9rico??? }void InjectCode()              :{/*@bgen(jjtree) IfStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t, u, v;}{/*@bgen(jjtree) IfStatement */
  try {
/*@egen*/  < IF > u = < IDENTIFIER > ":" v = < IDENTIFIER >  (    t = "<"  | t = ">"  | t = "<="  | t = ">="  )/*@bgen(jjtree) Left */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTLEFT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
  }
/*@egen*/  {    jjtn001.val = u.image;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/       /*@bgen(jjtree) Right */
  {
    SimpleNode jjtn002 = new SimpleNode(JJTRIGHT);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn002, true);
    jjtc002 = false;
  }
/*@egen*/  {    jjtn002.val = v.image;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/        /*@bgen(jjtree) #LeftOp( 2) */
  {
    SimpleNode jjtn003 = new SimpleNode(JJTLEFTOP);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn003,  2);
    jjtc003 = false;
  }
/*@egen*/  {}/*@bgen(jjtree)*/
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003,  2);
    }
  }
/*@egen*/            /*@bgen(jjtree) RightOp */
{
  SimpleNode jjtn004 = new SimpleNode(JJTRIGHTOP);
  boolean jjtc004 = true;
  jjtree.openNodeScope(jjtn004);
}
try {
/*@egen*/Number()/*@bgen(jjtree)*/
} catch (Throwable jjte004) {
  if (jjtc004) {
    jjtree.clearNodeScope(jjtn004);
    jjtc004 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte004 instanceof RuntimeException) {
    throw (RuntimeException)jjte004;
  }
  if (jjte004 instanceof ParseException) {
    throw (ParseException)jjte004;
  }
  throw (Error)jjte004;
} finally {
  if (jjtc004) {
    jjtree.closeNodeScope(jjtn004, true);
  }
}
/*@egen*/         /*@bgen(jjtree) #Condition( 2) */
{
  SimpleNode jjtn005 = new SimpleNode(JJTCONDITION);
  boolean jjtc005 = true;
  jjtree.openNodeScope(jjtn005);
}
try {
/*@egen*//*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn005,  2);
  jjtc005 = false;
}
/*@egen*/{  jjtn005.val = t.image;}/*@bgen(jjtree)*/
} finally {
  if (jjtc005) {
    jjtree.closeNodeScope(jjtn005,  2);
  }
}
/*@egen*/             /*@bgen(jjtree) Body */
{
  SimpleNode jjtn006 = new SimpleNode(JJTBODY);
  boolean jjtc006 = true;
  jjtree.openNodeScope(jjtn006);
}
try {
/*@egen*/(  TargetCode())+/*@bgen(jjtree)*/
} catch (Throwable jjte006) {
  if (jjtc006) {
    jjtree.clearNodeScope(jjtn006);
    jjtc006 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte006 instanceof RuntimeException) {
    throw (RuntimeException)jjte006;
  }
  if (jjte006 instanceof ParseException) {
    throw (ParseException)jjte006;
  }
  throw (Error)jjte006;
} finally {
  if (jjtc006) {
    jjtree.closeNodeScope(jjtn006, true);
  }
}
/*@egen*/      < END >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void TypeDef():{/*@bgen(jjtree) TypeDef */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPEDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) TypeDef */
  try {
/*@egen*/  < TYPEDEF > t = < IDENTIFIER >  {    jjtn000.val = t.image;  }  "=" Types() ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void DataTypeConvRules() :{/*@bgen(jjtree) DataTypeConvRules */
 SimpleNode jjtn000 = new SimpleNode(JJTDATATYPECONVRULES);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) DataTypeConvRules */
  try {
/*@egen*/  (/*@bgen(jjtree) Comutative */
   {
     SimpleNode jjtn001 = new SimpleNode(JJTCOMUTATIVE);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/< COMMUTATIVE >/*@bgen(jjtree)*/
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/            )? < OPERATION > OpsForConvRules()/*@bgen(jjtree) Args */
                                                                 {
                                                                   SimpleNode jjtn004 = new SimpleNode(JJTARGS);
                                                                   boolean jjtc004 = true;
                                                                   jjtree.openNodeScope(jjtn004);
                                                                 }
                                                                 try {
/*@egen*/ (TypesOnCOnvRules()  (/*@bgen(jjtree) Lhs */
    {
      SimpleNode jjtn002 = new SimpleNode(JJTLHS);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/    < LHS >/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
    }
/*@egen*/       | t = < IDENTIFIER >/*@bgen(jjtree) Ident */
  {
    SimpleNode jjtn003 = new SimpleNode(JJTIDENT);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn003, true);
    jjtc003 = false;
  }
/*@egen*/  {	jjtn003.val = t.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
  }
/*@egen*/         ))/*@bgen(jjtree)*/
                                                                 } catch (Throwable jjte004) {
                                                                   if (jjtc004) {
                                                                     jjtree.clearNodeScope(jjtn004);
                                                                     jjtc004 = false;
                                                                   } else {
                                                                     jjtree.popNode();
                                                                   }
                                                                   if (jjte004 instanceof RuntimeException) {
                                                                     throw (RuntimeException)jjte004;
                                                                   }
                                                                   if (jjte004 instanceof ParseException) {
                                                                     throw (ParseException)jjte004;
                                                                   }
                                                                   throw (Error)jjte004;
                                                                 } finally {
                                                                   if (jjtc004) {
                                                                     jjtree.closeNodeScope(jjtn004, true);
                                                                   }
                                                                 }
/*@egen*/        "::="/*@bgen(jjtree) TempVars */
        {
          SimpleNode jjtn014 = new SimpleNode(JJTTEMPVARS);
          boolean jjtc014 = true;
          jjtree.openNodeScope(jjtn014);
        }
        try {
/*@egen*/ (/*@bgen(jjtree) Brackets */
          {
            SimpleNode jjtn008 = new SimpleNode(JJTBRACKETS);
            boolean jjtc008 = true;
            jjtree.openNodeScope(jjtn008);
          }
          try {
/*@egen*/ ("("/*@bgen(jjtree) Type */
               {
                 SimpleNode jjtn007 = new SimpleNode(JJTTYPE);
                 boolean jjtc007 = true;
                 jjtree.openNodeScope(jjtn007);
               }
               try {
/*@egen*/ (TypesOnCOnvRules()    (/*@bgen(jjtree) Ir */
    {
      SimpleNode jjtn005 = new SimpleNode(JJTIR);
      boolean jjtc005 = true;
      jjtree.openNodeScope(jjtn005);
    }
    try {
/*@egen*/    < IR >/*@bgen(jjtree)*/
    } finally {
      if (jjtc005) {
        jjtree.closeNodeScope(jjtn005, true);
      }
    }
/*@egen*/      | t = < IDENTIFIER >/*@bgen(jjtree) Ident */
  {
    SimpleNode jjtn006 = new SimpleNode(JJTIDENT);
    boolean jjtc006 = true;
    jjtree.openNodeScope(jjtn006);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn006, true);
    jjtc006 = false;
  }
/*@egen*/  {
    jjtn006.val = t.image;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc006) {
      jjtree.closeNodeScope(jjtn006, true);
    }
  }
/*@egen*/         ))/*@bgen(jjtree)*/
               } catch (Throwable jjte007) {
                 if (jjtc007) {
                   jjtree.clearNodeScope(jjtn007);
                   jjtc007 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte007 instanceof RuntimeException) {
                   throw (RuntimeException)jjte007;
                 }
                 if (jjte007 instanceof ParseException) {
                   throw (ParseException)jjte007;
                 }
                 throw (Error)jjte007;
               } finally {
                 if (jjtc007) {
                   jjtree.closeNodeScope(jjtn007, true);
                 }
               }
/*@egen*/        ")")/*@bgen(jjtree)*/
          } catch (Throwable jjte008) {
            if (jjtc008) {
              jjtree.clearNodeScope(jjtn008);
              jjtc008 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte008 instanceof RuntimeException) {
              throw (RuntimeException)jjte008;
            }
            if (jjte008 instanceof ParseException) {
              throw (ParseException)jjte008;
            }
            throw (Error)jjte008;
          } finally {
            if (jjtc008) {
              jjtree.closeNodeScope(jjtn008, true);
            }
          }
/*@egen*/           {}/*@bgen(jjtree) SquareBrackets */
  {
    SimpleNode jjtn013 = new SimpleNode(JJTSQUAREBRACKETS);
    boolean jjtc013 = true;
    jjtree.openNodeScope(jjtn013);
  }
  try {
/*@egen*/
  
  (    ("["/*@bgen(jjtree) Type */
         {
           SimpleNode jjtn010 = new SimpleNode(JJTTYPE);
           boolean jjtc010 = true;
           jjtree.openNodeScope(jjtn010);
         }
         try {
/*@egen*/ (TypesOnCOnvRules() t = < IDENTIFIER >/*@bgen(jjtree) Ident */
    {
      SimpleNode jjtn009 = new SimpleNode(JJTIDENT);
      boolean jjtc009 = true;
      jjtree.openNodeScope(jjtn009);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn009, true);
      jjtc009 = false;
    }
/*@egen*/    {		jjtn009.val = t.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc009) {
        jjtree.closeNodeScope(jjtn009, true);
      }
    }
/*@egen*/        )/*@bgen(jjtree)*/
         } catch (Throwable jjte010) {
           if (jjtc010) {
             jjtree.clearNodeScope(jjtn010);
             jjtc010 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte010 instanceof RuntimeException) {
             throw (RuntimeException)jjte010;
           }
           if (jjte010 instanceof ParseException) {
             throw (ParseException)jjte010;
           }
           throw (Error)jjte010;
         } finally {
           if (jjtc010) {
             jjtree.closeNodeScope(jjtn010, true);
           }
         }
/*@egen*/          {}  (    ","/*@bgen(jjtree) Type */
        {
          SimpleNode jjtn012 = new SimpleNode(JJTTYPE);
          boolean jjtc012 = true;
          jjtree.openNodeScope(jjtn012);
        }
        try {
/*@egen*/ (TypesOnCOnvRules() t = < IDENTIFIER >/*@bgen(jjtree) Ident */
    {
      SimpleNode jjtn011 = new SimpleNode(JJTIDENT);
      boolean jjtc011 = true;
      jjtree.openNodeScope(jjtn011);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn011, true);
      jjtc011 = false;
    }
/*@egen*/ 
    {
		jjtn011.val = t.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc011) {
        jjtree.closeNodeScope(jjtn011, true);
      }
    }
/*@egen*/        )/*@bgen(jjtree)*/
        } catch (Throwable jjte012) {
          if (jjtc012) {
            jjtree.clearNodeScope(jjtn012);
            jjtc012 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte012 instanceof RuntimeException) {
            throw (RuntimeException)jjte012;
          }
          if (jjte012 instanceof ParseException) {
            throw (ParseException)jjte012;
          }
          throw (Error)jjte012;
        } finally {
          if (jjtc012) {
            jjtree.closeNodeScope(jjtn012, true);
          }
        }
/*@egen*/          {}  )?)  "]")/*@bgen(jjtree)*/
  } catch (Throwable jjte013) {
    if (jjtc013) {
      jjtree.clearNodeScope(jjtn013);
      jjtc013 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte013 instanceof RuntimeException) {
      throw (RuntimeException)jjte013;
    }
    if (jjte013 instanceof ParseException) {
      throw (ParseException)jjte013;
    }
    throw (Error)jjte013;
  } finally {
    if (jjtc013) {
      jjtree.closeNodeScope(jjtn013, true);
    }
  }
/*@egen*/                 )/*@bgen(jjtree)*/
        } catch (Throwable jjte014) {
          if (jjtc014) {
            jjtree.clearNodeScope(jjtn014);
            jjtc014 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte014 instanceof RuntimeException) {
            throw (RuntimeException)jjte014;
          }
          if (jjte014 instanceof ParseException) {
            throw (ParseException)jjte014;
          }
          throw (Error)jjte014;
        } finally {
          if (jjtc014) {
            jjtree.closeNodeScope(jjtn014, true);
          }
        }
/*@egen*/           ":"/*@bgen(jjtree) Rules */
  {
    SimpleNode jjtn015 = new SimpleNode(JJTRULES);
    boolean jjtc015 = true;
    jjtree.openNodeScope(jjtn015);
  }
  try {
/*@egen*/  (    IfConvRule()  | SimpleStatement()  )+/*@bgen(jjtree)*/
  } catch (Throwable jjte015) {
    if (jjtc015) {
      jjtree.clearNodeScope(jjtn015);
      jjtc015 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte015 instanceof RuntimeException) {
      throw (RuntimeException)jjte015;
    }
    if (jjte015 instanceof ParseException) {
      throw (ParseException)jjte015;
    }
    throw (Error)jjte015;
  } finally {
    if (jjtc015) {
      jjtree.closeNodeScope(jjtn015, true);
    }
  }
/*@egen*/         < END >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ForEachStatement() :{/*@bgen(jjtree) ForEachStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTFOREACHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) ForEachStatement */
  try {
/*@egen*/  (    < FOREACH >    {      int argCounter = 1;    }    (/*@bgen(jjtree) Key */
      {
        SimpleNode jjtn001 = new SimpleNode(JJTKEY);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*/      < KEY >/*@bgen(jjtree)*/
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
        }
      }
/*@egen*/         |/*@bgen(jjtree) Tag */
      {
        SimpleNode jjtn002 = new SimpleNode(JJTTAG);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*/ < TAG >/*@bgen(jjtree)*/
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002, true);
        }
      }
/*@egen*/         |/*@bgen(jjtree) Var */
      {
        SimpleNode jjtn003 = new SimpleNode(JJTVAR);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
      }
      try {
/*@egen*/ < VAR >/*@bgen(jjtree)*/
      } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003, true);
        }
      }
/*@egen*/     )/*@bgen(jjtree) #Iter( argCounter) */
    {
      SimpleNode jjtn005 = new SimpleNode(JJTITER);
      boolean jjtc005 = true;
      jjtree.openNodeScope(jjtn005);
    }
    try {
/*@egen*/    (t = < IDENTIFIER >/*@bgen(jjtree) Elem */
    {
      SimpleNode jjtn004 = new SimpleNode(JJTELEM);
      boolean jjtc004 = true;
      jjtree.openNodeScope(jjtn004);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn004, true);
      jjtc004 = false;
    }
/*@egen*/    {      jjtn004.val = t.image;      argCounter++;    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc004) {
        jjtree.closeNodeScope(jjtn004, true);
      }
    }
/*@egen*/         )?/*@bgen(jjtree)*/
    } finally {
      if (jjtc005) {
        jjtree.closeNodeScope(jjtn005,  argCounter);
      }
    }
/*@egen*/                    < IN >/*@bgen(jjtree) IterList */
  {
    SimpleNode jjtn011 = new SimpleNode(JJTITERLIST);
    boolean jjtc011 = true;
    jjtree.openNodeScope(jjtn011);
  }
  try {
/*@egen*/  (    (      < IDENTIFIER >    |      (        (/*@bgen(jjtree) Program */
          {
            SimpleNode jjtn006 = new SimpleNode(JJTPROGRAM);
            boolean jjtc006 = true;
            jjtree.openNodeScope(jjtn006);
          }
          try {
/*@egen*/          < PROGRAM >/*@bgen(jjtree)*/
          } finally {
            if (jjtc006) {
              jjtree.closeNodeScope(jjtn006, true);
            }
          }
/*@egen*/                 |/*@bgen(jjtree) Function */
          {
            SimpleNode jjtn007 = new SimpleNode(JJTFUNCTION);
            boolean jjtc007 = true;
            jjtree.openNodeScope(jjtn007);
          }
          try {
/*@egen*/ < FUNCTION >/*@bgen(jjtree)*/
          } finally {
            if (jjtc007) {
              jjtree.closeNodeScope(jjtn007, true);
            }
          }
/*@egen*/          )        (          "="/*@bgen(jjtree) Equals */
              {
                SimpleNode jjtn008 = new SimpleNode(JJTEQUALS);
                boolean jjtc008 = true;
                jjtree.openNodeScope(jjtn008);
              }
              try {
/*@egen*/ SetOfJPs()/*@bgen(jjtree)*/
              } catch (Throwable jjte008) {
                if (jjtc008) {
                  jjtree.clearNodeScope(jjtn008);
                  jjtc008 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte008 instanceof RuntimeException) {
                  throw (RuntimeException)jjte008;
                }
                if (jjte008 instanceof ParseException) {
                  throw (ParseException)jjte008;
                }
                throw (Error)jjte008;
              } finally {
                if (jjtc008) {
                  jjtree.closeNodeScope(jjtn008, true);
                }
              }
/*@egen*/        )?      )      (        ":"/*@bgen(jjtree) Colons */
            {
              SimpleNode jjtn009 = new SimpleNode(JJTCOLONS);
              boolean jjtc009 = true;
              jjtree.openNodeScope(jjtn009);
            }
            try {
/*@egen*/ SetOfJPs()/*@bgen(jjtree)*/
            } catch (Throwable jjte009) {
              if (jjtc009) {
                jjtree.clearNodeScope(jjtn009);
                jjtc009 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte009 instanceof RuntimeException) {
                throw (RuntimeException)jjte009;
              }
              if (jjte009 instanceof ParseException) {
                throw (ParseException)jjte009;
              }
              throw (Error)jjte009;
            } finally {
              if (jjtc009) {
                jjtree.closeNodeScope(jjtn009, true);
              }
            }
/*@egen*/        )?    )?    (      "{"/*@bgen(jjtree) List */
          {
            SimpleNode jjtn010 = new SimpleNode(JJTLIST);
            boolean jjtc010 = true;
            jjtree.openNodeScope(jjtn010);
          }
          try {
/*@egen*/ JPList()/*@bgen(jjtree)*/
          } catch (Throwable jjte010) {
            if (jjtc010) {
              jjtree.clearNodeScope(jjtn010);
              jjtc010 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte010 instanceof RuntimeException) {
              throw (RuntimeException)jjte010;
            }
            if (jjte010 instanceof ParseException) {
              throw (ParseException)jjte010;
            }
            throw (Error)jjte010;
          } finally {
            if (jjtc010) {
              jjtree.closeNodeScope(jjtn010, true);
            }
          }
/*@egen*/       "}")?  )/*@bgen(jjtree)*/
  } catch (Throwable jjte011) {
    if (jjtc011) {
      jjtree.clearNodeScope(jjtn011);
      jjtc011 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte011 instanceof RuntimeException) {
      throw (RuntimeException)jjte011;
    }
    if (jjte011 instanceof ParseException) {
      throw (ParseException)jjte011;
    }
    throw (Error)jjte011;
  } finally {
    if (jjtc011) {
      jjtree.closeNodeScope(jjtn011, true);
    }
  }
/*@egen*/           < DO >  {    int instCounter = 0;  }/*@bgen(jjtree) Body */
  {
    SimpleNode jjtn012 = new SimpleNode(JJTBODY);
    boolean jjtc012 = true;
    jjtree.openNodeScope(jjtn012);
  }
  try {
/*@egen*/  ((Insert()| Set()) (< DEPENDENT > ":" (DependentStmt()) + < END >) ?)+/*@bgen(jjtree)*/
  } catch (Throwable jjte012) {
    if (jjtc012) {
      jjtree.clearNodeScope(jjtn012);
      jjtc012 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte012 instanceof RuntimeException) {
      throw (RuntimeException)jjte012;
    }
    if (jjte012 instanceof ParseException) {
      throw (ParseException)jjte012;
    }
    throw (Error)jjte012;
  } finally {
    if (jjtc012) {
      jjtree.closeNodeScope(jjtn012, true);
    }
  }
/*@egen*/      < END >)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Insert() :{/*@bgen(jjtree) Insert */
  SimpleNode jjtn000 = new SimpleNode(JJTINSERT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Insert */
  try {
/*@egen*/  < INSERT > "."  (/*@bgen(jjtree) Before */
    {
      SimpleNode jjtn001 = new SimpleNode(JJTBEFORE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/    < BEFORE >/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/          |/*@bgen(jjtree) After */
    {
      SimpleNode jjtn002 = new SimpleNode(JJTAFTER);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/ < AFTER >/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
    }
/*@egen*/         |/*@bgen(jjtree) Around */
    {
      SimpleNode jjtn003 = new SimpleNode(JJTAROUND);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
    }
    try {
/*@egen*/ < AROUND >/*@bgen(jjtree)*/
    } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
      }
    }
/*@egen*/        )  {    int argCounter = 1;  }/*@bgen(jjtree) #Args( argCounter) */
  {
    SimpleNode jjtn006 = new SimpleNode(JJTARGS);
    boolean jjtc006 = true;
    jjtree.openNodeScope(jjtn006);
  }
  try {
/*@egen*/  (    "."    (/*@bgen(jjtree) End */
      {
        SimpleNode jjtn004 = new SimpleNode(JJTEND);
        boolean jjtc004 = true;
        jjtree.openNodeScope(jjtn004);
      }
      try {
/*@egen*/      < END >/*@bgen(jjtree)*/
      } finally {
        if (jjtc004) {
          jjtree.closeNodeScope(jjtn004, true);
        }
      }
/*@egen*/         |/*@bgen(jjtree) Begin */
      {
        SimpleNode jjtn005 = new SimpleNode(JJTBEGIN);
        boolean jjtc005 = true;
        jjtree.openNodeScope(jjtn005);
      }
      try {
/*@egen*/ < BEGIN >/*@bgen(jjtree)*/
      } finally {
        if (jjtc005) {
          jjtree.closeNodeScope(jjtn005, true);
        }
      }
/*@egen*/       )    {      argCounter++;    }  )?/*@bgen(jjtree)*/
  } finally {
    if (jjtc006) {
      jjtree.closeNodeScope(jjtn006,  argCounter);
    }
  }
/*@egen*/                   ":"(/*@bgen(jjtree) Body */
  {
    SimpleNode jjtn007 = new SimpleNode(JJTBODY);
    boolean jjtc007 = true;
    jjtree.openNodeScope(jjtn007);
  }
  try {
/*@egen*/  TargetCode()/*@bgen(jjtree)*/
  } catch (Throwable jjte007) {
    if (jjtc007) {
      jjtree.clearNodeScope(jjtn007);
      jjtc007 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte007 instanceof RuntimeException) {
      throw (RuntimeException)jjte007;
    }
    if (jjte007 instanceof ParseException) {
      throw (ParseException)jjte007;
    }
    throw (Error)jjte007;
  } finally {
    if (jjtc007) {
      jjtree.closeNodeScope(jjtn007, true);
    }
  }
/*@egen*/      )+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Set()       :{  Token t;}{  < SET >  (/*@bgen(jjtree) Set */
    {
      SimpleNode jjtn003 = new SimpleNode(JJTSET);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
    }
    try {
/*@egen*/    (      t = < IDENTIFIER >/*@bgen(jjtree) Lhs */
      {
        SimpleNode jjtn001 = new SimpleNode(JJTLHS);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*//*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn001, true);
        jjtc001 = false;
      }
/*@egen*/      {        jjtn001.val = t.image;      }/*@bgen(jjtree)*/
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
        }
      }
/*@egen*/           "="/*@bgen(jjtree) Rhs */
               {
                 SimpleNode jjtn002 = new SimpleNode(JJTRHS);
                 boolean jjtc002 = true;
                 jjtree.openNodeScope(jjtn002);
               }
               try {
/*@egen*/ (("{" Identifier() ("," Identifier()) * "}")    | Types()    | t = < IDENTIFIER >/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn002, true);
        jjtc002 = false;
      }
/*@egen*/      {        jjtn002.val = t.image;      }    )/*@bgen(jjtree)*/
               } catch (Throwable jjte002) {
                 if (jjtc002) {
                   jjtree.clearNodeScope(jjtn002);
                   jjtc002 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte002 instanceof RuntimeException) {
                   throw (RuntimeException)jjte002;
                 }
                 if (jjte002 instanceof ParseException) {
                   throw (ParseException)jjte002;
                 }
                 throw (Error)jjte002;
               } finally {
                 if (jjtc002) {
                   jjtree.closeNodeScope(jjtn002, true);
                 }
               }
/*@egen*/     )/*@bgen(jjtree)*/
    } catch (Throwable jjte003) {
      if (jjtc003) {
        jjtree.clearNodeScope(jjtn003);
        jjtc003 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte003 instanceof RuntimeException) {
        throw (RuntimeException)jjte003;
      }
      if (jjte003 instanceof ParseException) {
        throw (ParseException)jjte003;
      }
      throw (Error)jjte003;
    } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
      }
    }
/*@egen*/     |/*@bgen(jjtree) SetFixed */
  {
    SimpleNode jjtn006 = new SimpleNode(JJTSETFIXED);
    boolean jjtc006 = true;
    jjtree.openNodeScope(jjtn006);
  }
  try {
/*@egen*/ (< FIXED > "=" "{" FixedPointProperties() "="/*@bgen(jjtree) #Set( 2) */
                                                {
                                                  SimpleNode jjtn004 = new SimpleNode(JJTSET);
                                                  boolean jjtc004 = true;
                                                  jjtree.openNodeScope(jjtn004);
                                                }
                                                try {
/*@egen*/ ValuesFixedPointProperties()/*@bgen(jjtree)*/
                                                } catch (Throwable jjte004) {
                                                  if (jjtc004) {
                                                    jjtree.clearNodeScope(jjtn004);
                                                    jjtc004 = false;
                                                  } else {
                                                    jjtree.popNode();
                                                  }
                                                  if (jjte004 instanceof RuntimeException) {
                                                    throw (RuntimeException)jjte004;
                                                  }
                                                  if (jjte004 instanceof ParseException) {
                                                    throw (ParseException)jjte004;
                                                  }
                                                  throw (Error)jjte004;
                                                } finally {
                                                  if (jjtc004) {
                                                    jjtree.closeNodeScope(jjtn004,  2);
                                                  }
                                                }
/*@egen*/         ("," FixedPointProperties() "="/*@bgen(jjtree) #Set( 2) */
                                                                                                                     {
                                                                                                                       SimpleNode jjtn005 = new SimpleNode(JJTSET);
                                                                                                                       boolean jjtc005 = true;
                                                                                                                       jjtree.openNodeScope(jjtn005);
                                                                                                                     }
                                                                                                                     try {
/*@egen*/ ValuesFixedPointProperties()/*@bgen(jjtree)*/
                                                                                                                     } catch (Throwable jjte005) {
                                                                                                                       if (jjtc005) {
                                                                                                                         jjtree.clearNodeScope(jjtn005);
                                                                                                                         jjtc005 = false;
                                                                                                                       } else {
                                                                                                                         jjtree.popNode();
                                                                                                                       }
                                                                                                                       if (jjte005 instanceof RuntimeException) {
                                                                                                                         throw (RuntimeException)jjte005;
                                                                                                                       }
                                                                                                                       if (jjte005 instanceof ParseException) {
                                                                                                                         throw (ParseException)jjte005;
                                                                                                                       }
                                                                                                                       throw (Error)jjte005;
                                                                                                                     } finally {
                                                                                                                       if (jjtc005) {
                                                                                                                         jjtree.closeNodeScope(jjtn005,  2);
                                                                                                                       }
                                                                                                                     }
/*@egen*/        ) * "}")/*@bgen(jjtree)*/
  } catch (Throwable jjte006) {
    if (jjtc006) {
      jjtree.clearNodeScope(jjtn006);
      jjtc006 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte006 instanceof RuntimeException) {
      throw (RuntimeException)jjte006;
    }
    if (jjte006 instanceof ParseException) {
      throw (ParseException)jjte006;
    }
    throw (Error)jjte006;
  } finally {
    if (jjtc006) {
      jjtree.closeNodeScope(jjtn006, true);
    }
  }
/*@egen*/          )";"}void WithStatement() :{/*@bgen(jjtree) WithStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTWITHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) WithStatement */
  try {
/*@egen*/  < WITH >  (    (      (        (          < FUNCTION > "=" t = < IDENTIFIER >/*@bgen(jjtree) Function */
          {
            SimpleNode jjtn001 = new SimpleNode(JJTFUNCTION);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*//*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn001, true);
            jjtc001 = false;
          }
/*@egen*/          {            jjtn001.val = t.image;          }/*@bgen(jjtree)*/
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
          }
/*@egen*/                           | < MODULE > "=" t = < IDENTIFIER >/*@bgen(jjtree) Module */
          {
            SimpleNode jjtn002 = new SimpleNode(JJTMODULE);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          }
          try {
/*@egen*//*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn002, true);
            jjtc002 = false;
          }
/*@egen*/          {            jjtn002.val = t.image;          }/*@bgen(jjtree)*/
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
          }
/*@egen*/                 )      )      (        (          < DO >/*@bgen(jjtree) Do */
          {
            SimpleNode jjtn003 = new SimpleNode(JJTDO);
            boolean jjtc003 = true;
            jjtree.openNodeScope(jjtn003);
          }
          try {
/*@egen*/          (            Statement()            (              < DEPENDENT > ":"              (                DependentStmt()              )+              < END >            )?          )+/*@bgen(jjtree)*/
          } catch (Throwable jjte003) {
            if (jjtc003) {
              jjtree.clearNodeScope(jjtn003);
              jjtc003 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte003 instanceof RuntimeException) {
              throw (RuntimeException)jjte003;
            }
            if (jjte003 instanceof ParseException) {
              throw (ParseException)jjte003;
            }
            throw (Error)jjte003;
          } finally {
            if (jjtc003) {
              jjtree.closeNodeScope(jjtn003, true);
            }
          }
/*@egen*/              < END >)      |        (          (            ","            (              (< CALL > "=" t = < IDENTIFIER >)/*@bgen(jjtree) Call */
              {
                SimpleNode jjtn004 = new SimpleNode(JJTCALL);
                boolean jjtc004 = true;
                jjtree.openNodeScope(jjtn004);
              }
              try {
/*@egen*//*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn004, true);
                jjtc004 = false;
              }
/*@egen*/              {                jjtn004.val = t.image;              }/*@bgen(jjtree)*/
              } finally {
                if (jjtc004) {
                  jjtree.closeNodeScope(jjtn004, true);
                }
              }
/*@egen*/                               |/*@bgen(jjtree) Operation */
              {
                SimpleNode jjtn005 = new SimpleNode(JJTOPERATION);
                boolean jjtc005 = true;
                jjtree.openNodeScope(jjtn005);
              }
              try {
/*@egen*/ (< OPERATION > "=" OpsForConfigRules())/*@bgen(jjtree)*/
              } catch (Throwable jjte005) {
                if (jjtc005) {
                  jjtree.clearNodeScope(jjtn005);
                  jjtc005 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte005 instanceof RuntimeException) {
                  throw (RuntimeException)jjte005;
                }
                if (jjte005 instanceof ParseException) {
                  throw (ParseException)jjte005;
                }
                throw (Error)jjte005;
              } finally {
                if (jjtc005) {
                  jjtree.closeNodeScope(jjtn005, true);
                }
              }
/*@egen*/           )        )?/*@bgen(jjtree) Use */
        {
          SimpleNode jjtn007 = new SimpleNode(JJTUSE);
          boolean jjtc007 = true;
          jjtree.openNodeScope(jjtn007);
        }
        try {
/*@egen*/        (          < USE > (< CONFIGURATION > t = < IDENTIFIER >/*@bgen(jjtree) Config */
          {
            SimpleNode jjtn006 = new SimpleNode(JJTCONFIG);
            boolean jjtc006 = true;
            jjtree.openNodeScope(jjtn006);
          }
          try {
/*@egen*//*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn006, true);
            jjtc006 = false;
          }
/*@egen*/          {            jjtn006.val = t.image;          }/*@bgen(jjtree)*/
          } finally {
            if (jjtc006) {
              jjtree.closeNodeScope(jjtn006, true);
            }
          }
/*@egen*/                  ";")+ < END >        )/*@bgen(jjtree)*/
        } finally {
          if (jjtc007) {
            jjtree.closeNodeScope(jjtn007, true);
          }
        }
/*@egen*/     )    )  )|  (    < STMT > "=" t = < STRING >/*@bgen(jjtree) Statement */
    {
      SimpleNode jjtn008 = new SimpleNode(JJTSTATEMENT);
      boolean jjtc008 = true;
      jjtree.openNodeScope(jjtn008);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn008, true);
      jjtc008 = false;
    }
/*@egen*/    {      jjtn008.val = t.image;    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc008) {
        jjtree.closeNodeScope(jjtn008, true);
      }
    }
/*@egen*/               < DO >/*@bgen(jjtree) Do */
                      {
                        SimpleNode jjtn009 = new SimpleNode(JJTDO);
                        boolean jjtc009 = true;
                        jjtree.openNodeScope(jjtn009);
                      }
                      try {
/*@egen*/ Decompose()/*@bgen(jjtree)*/
                      } catch (Throwable jjte009) {
                        if (jjtc009) {
                          jjtree.clearNodeScope(jjtn009);
                          jjtc009 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte009 instanceof RuntimeException) {
                          throw (RuntimeException)jjte009;
                        }
                        if (jjte009 instanceof ParseException) {
                          throw (ParseException)jjte009;
                        }
                        throw (Error)jjte009;
                      } finally {
                        if (jjtc009) {
                          jjtree.closeNodeScope(jjtn009, true);
                        }
                      }
/*@egen*/     < END >)|(  < VAR > "="/*@bgen(jjtree) Var */
              {
                SimpleNode jjtn010 = new SimpleNode(JJTVAR);
                boolean jjtc010 = true;
                jjtree.openNodeScope(jjtn010);
              }
              try {
/*@egen*/ SetOfJPs()/*@bgen(jjtree)*/
              } catch (Throwable jjte010) {
                if (jjtc010) {
                  jjtree.clearNodeScope(jjtn010);
                  jjtc010 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte010 instanceof RuntimeException) {
                  throw (RuntimeException)jjte010;
                }
                if (jjte010 instanceof ParseException) {
                  throw (ParseException)jjte010;
                }
                throw (Error)jjte010;
              } finally {
                if (jjtc010) {
                  jjtree.closeNodeScope(jjtn010, true);
                }
              }
/*@egen*/      < DO >/*@bgen(jjtree) Do */
                                     {
                                       SimpleNode jjtn011 = new SimpleNode(JJTDO);
                                       boolean jjtc011 = true;
                                       jjtree.openNodeScope(jjtn011);
                                     }
                                     try {
/*@egen*/ (Statement())+/*@bgen(jjtree)*/
                                     } catch (Throwable jjte011) {
                                       if (jjtc011) {
                                         jjtree.clearNodeScope(jjtn011);
                                         jjtc011 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte011 instanceof RuntimeException) {
                                         throw (RuntimeException)jjte011;
                                       }
                                       if (jjte011 instanceof ParseException) {
                                         throw (ParseException)jjte011;
                                       }
                                       throw (Error)jjte011;
                                     } finally {
                                       if (jjtc011) {
                                         jjtree.closeNodeScope(jjtn011, true);
                                       }
                                     }
/*@egen*/    < END >))/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void TargetCode()       :{  Token t, s = null;}{/*@bgen(jjtree) Targetcode */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTTARGETCODE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/  < TARGETCODE >/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/            | < FPRINTF > "(" Arg(){  int argCounter = 1;}(  "," Arg()  {    argCounter++;  })*")"/*@bgen(jjtree) #Fprintf( argCounter) */
    {
      SimpleNode jjtn002 = new SimpleNode(JJTFPRINTF);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/ ";"/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  argCounter);
      }
    }
/*@egen*/                     | t = < IDENTIFIER >(/*@bgen(jjtree) #Assignment( 2) */
  {
    SimpleNode jjtn006 = new SimpleNode(JJTASSIGNMENT);
    boolean jjtc006 = true;
    jjtree.openNodeScope(jjtn006);
  }
  try {
/*@egen*/  (    Param()    {      jjtn006.val = t.image;    }    "="    (      (        < IDENTIFIER > Param()        {          jjtn006.val = t.image;        }        s = Op() t = < NUMBER >/*@bgen(jjtree) Number */
        {
          SimpleNode jjtn003 = new SimpleNode(JJTNUMBER);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn003, true);
          jjtc003 = false;
        }
/*@egen*/        {          jjtn003.val = t.image;        }/*@bgen(jjtree)*/
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
          }
        }
/*@egen*/               )/*@bgen(jjtree) #Op( 2) */
      {
        SimpleNode jjtn004 = new SimpleNode(JJTOP);
        boolean jjtc004 = true;
        jjtree.openNodeScope(jjtn004);
      }
      try {
/*@egen*//*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn004,  2);
        jjtc004 = false;
      }
/*@egen*/      {        jjtn004.val = s.image;      }/*@bgen(jjtree)*/
      } finally {
        if (jjtc004) {
          jjtree.closeNodeScope(jjtn004,  2);
        }
      }
/*@egen*/                ";"  | (t = < NUMBER >)/*@bgen(jjtree) Number */
    {
      SimpleNode jjtn005 = new SimpleNode(JJTNUMBER);
      boolean jjtc005 = true;
      jjtree.openNodeScope(jjtn005);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn005, true);
      jjtc005 = false;
    }
/*@egen*/    {      jjtn005.val = t.image;    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc005) {
        jjtree.closeNodeScope(jjtn005, true);
      }
    }
/*@egen*/            ";"))/*@bgen(jjtree)*/
  } catch (Throwable jjte006) {
    if (jjtc006) {
      jjtree.clearNodeScope(jjtn006);
      jjtc006 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte006 instanceof RuntimeException) {
      throw (RuntimeException)jjte006;
    }
    if (jjte006 instanceof ParseException) {
      throw (ParseException)jjte006;
    }
    throw (Error)jjte006;
  } finally {
    if (jjtc006) {
      jjtree.closeNodeScope(jjtn006,  2);
    }
  }
/*@egen*/               |{  argCounter = 0;}(  "("  (    {      argCounter++;    }    Arg()    (      "," Arg()      {        argCounter++;      }    )*  )?  ")" ";")/*@bgen(jjtree) #Method( argCounter) */
{
  SimpleNode jjtn007 = new SimpleNode(JJTMETHOD);
  boolean jjtc007 = true;
  jjtree.openNodeScope(jjtn007);
}
try {
/*@egen*//*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn007,  argCounter);
  jjtc007 = false;
}
/*@egen*/{  jjtn007.val = t.image;}/*@bgen(jjtree)*/
} finally {
  if (jjtc007) {
    jjtree.closeNodeScope(jjtn007,  argCounter);
  }
}
/*@egen*/                   )| < PRINT > "("{  argCounter = 2;}(/*@bgen(jjtree) Screen */
  {
    SimpleNode jjtn008 = new SimpleNode(JJTSCREEN);
    boolean jjtc008 = true;
    jjtree.openNodeScope(jjtn008);
  }
  try {
/*@egen*/  < SCREEN >/*@bgen(jjtree)*/
  } finally {
    if (jjtc008) {
      jjtree.closeNodeScope(jjtn008, true);
    }
  }
/*@egen*/        |/*@bgen(jjtree) #File( 1) */
  {
    SimpleNode jjtn013 = new SimpleNode(JJTFILE);
    boolean jjtc013 = true;
    jjtree.openNodeScope(jjtn013);
  }
  try {
/*@egen*/ (< FILE > ":" (/*@bgen(jjtree) #FileId( 2) */
                 {
                   SimpleNode jjtn011 = new SimpleNode(JJTFILEID);
                   boolean jjtc011 = true;
                   jjtree.openNodeScope(jjtn011);
                 }
                 try {
/*@egen*/(t = < IDENTIFIER >/*@bgen(jjtree) Lhs */
  {
    SimpleNode jjtn009 = new SimpleNode(JJTLHS);
    boolean jjtc009 = true;
    jjtree.openNodeScope(jjtn009);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn009, true);
    jjtc009 = false;
  }
/*@egen*/  {    jjtn009.val = t.image;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc009) {
      jjtree.closeNodeScope(jjtn009, true);
    }
  }
/*@egen*/       "." t = < IDENTIFIER >/*@bgen(jjtree) Rhs */
  {
    SimpleNode jjtn010 = new SimpleNode(JJTRHS);
    boolean jjtc010 = true;
    jjtree.openNodeScope(jjtn010);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn010, true);
    jjtc010 = false;
  }
/*@egen*/  {    jjtn010.val = t.image;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc010) {
      jjtree.closeNodeScope(jjtn010, true);
    }
  }
/*@egen*/      )/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc011) {
                     jjtree.closeNodeScope(jjtn011,  2);
                   }
                 }
/*@egen*/           | (t = < QUOTED >)/*@bgen(jjtree) Quoted */
  {
    SimpleNode jjtn012 = new SimpleNode(JJTQUOTED);
    boolean jjtc012 = true;
    jjtree.openNodeScope(jjtn012);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn012, true);
    jjtc012 = false;
  }
/*@egen*/  {    jjtn012.val = t.image;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc012) {
      jjtree.closeNodeScope(jjtn012, true);
    }
  }
/*@egen*/         ))/*@bgen(jjtree)*/
  } finally {
    if (jjtc013) {
      jjtree.closeNodeScope(jjtn013,  1);
    }
  }
/*@egen*/         )"," Arg()(  "," Arg()  {    argCounter++;  })*")"/*@bgen(jjtree) #Print( argCounter) */
    {
      SimpleNode jjtn014 = new SimpleNode(JJTPRINT);
      boolean jjtc014 = true;
      jjtree.openNodeScope(jjtn014);
    }
    try {
/*@egen*/ ";"/*@bgen(jjtree)*/
    } finally {
      if (jjtc014) {
        jjtree.closeNodeScope(jjtn014,  argCounter);
      }
    }
/*@egen*/                   | < WARNING > "(" t = < QUOTED > ")" ";"/*@bgen(jjtree) Warning */
{
  SimpleNode jjtn015 = new SimpleNode(JJTWARNING);
  boolean jjtc015 = true;
  jjtree.openNodeScope(jjtn015);
}
try {
/*@egen*//*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn015, true);
  jjtc015 = false;
}
/*@egen*/{  jjtn015.val = t.image;}/*@bgen(jjtree)*/
} finally {
  if (jjtc015) {
    jjtree.closeNodeScope(jjtn015, true);
  }
}
/*@egen*/        }void Arg()       :{  Token t;}{  t = < NUMBER >/*@bgen(jjtree) Arg */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTARG);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
  }
/*@egen*/  {    jjtn001.val = t.image;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/      | < IDENTIFIER >/*@bgen(jjtree) Arg */
                 {
                   SimpleNode jjtn002 = new SimpleNode(JJTARG);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
                 }
                 try {
/*@egen*/ (Param())?/*@bgen(jjtree)*/
                 } catch (Throwable jjte002) {
                   if (jjtc002) {
                     jjtree.clearNodeScope(jjtn002);
                     jjtc002 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte002 instanceof RuntimeException) {
                     throw (RuntimeException)jjte002;
                   }
                   if (jjte002 instanceof ParseException) {
                     throw (ParseException)jjte002;
                   }
                   throw (Error)jjte002;
                 } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002, true);
                   }
                 }
/*@egen*/    | t = < QUOTED > (Param() ":" < QUOTED >)?/*@bgen(jjtree) Arg */
{
  SimpleNode jjtn003 = new SimpleNode(JJTARG);
  boolean jjtc003 = true;
  jjtree.openNodeScope(jjtn003);
}
try {
/*@egen*//*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn003, true);
  jjtc003 = false;
}
/*@egen*/{  jjtn003.val = t.image;}/*@bgen(jjtree)*/
} finally {
  if (jjtc003) {
    jjtree.closeNodeScope(jjtn003, true);
  }
}
/*@egen*/    | Param(){  int counter = 1;}/*@bgen(jjtree) #Arg( counter) */
{
  SimpleNode jjtn005 = new SimpleNode(JJTARG);
  boolean jjtc005 = true;
  jjtree.openNodeScope(jjtn005);
}
try {
/*@egen*/(":" t = < QUOTED >/*@bgen(jjtree) Colons */
{
  SimpleNode jjtn004 = new SimpleNode(JJTCOLONS);
  boolean jjtc004 = true;
  jjtree.openNodeScope(jjtn004);
}
try {
/*@egen*//*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn004, true);
  jjtc004 = false;
}
/*@egen*/{  jjtn004.val = t.image;  counter = 2;}/*@bgen(jjtree)*/
} finally {
  if (jjtc004) {
    jjtree.closeNodeScope(jjtn004, true);
  }
}
/*@egen*/       )?/*@bgen(jjtree)*/
} finally {
  if (jjtc005) {
    jjtree.closeNodeScope(jjtn005,  counter);
  }
}
/*@egen*/              | "\'" Param(){  counter = 1;}(":" t = < QUOTED >/*@bgen(jjtree) Colons */
{
  SimpleNode jjtn006 = new SimpleNode(JJTCOLONS);
  boolean jjtc006 = true;
  jjtree.openNodeScope(jjtn006);
}
try {
/*@egen*//*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn006, true);
  jjtc006 = false;
}
/*@egen*/{  jjtn006.val = t.image;  counter = 2;}/*@bgen(jjtree)*/
} finally {
  if (jjtc006) {
    jjtree.closeNodeScope(jjtn006, true);
  }
}
/*@egen*/       )?/*@bgen(jjtree) #Arg( counter) */
          {
            SimpleNode jjtn007 = new SimpleNode(JJTARG);
            boolean jjtc007 = true;
            jjtree.openNodeScope(jjtn007);
          }
          try {
/*@egen*/ "\'"/*@bgen(jjtree)*/
          } finally {
            if (jjtc007) {
              jjtree.closeNodeScope(jjtn007,  counter);
            }
          }
/*@egen*/              }void Param() :{/*@bgen(jjtree) Param */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t1, t2 = null;}{/*@bgen(jjtree) Param */
  try {
/*@egen*/  "<"  (/*@bgen(jjtree) Key */
    {
      SimpleNode jjtn001 = new SimpleNode(JJTKEY);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/    < KEY >/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/       | t1 = < IDENTIFIER >/*@bgen(jjtree) Identifier */
    {
      SimpleNode jjtn002 = new SimpleNode(JJTIDENTIFIER);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*//*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn002, true);
      jjtc002 = false;
    }
/*@egen*/    {      jjtn002.val = t1.image;    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
    }
/*@egen*/                 |/*@bgen(jjtree) Var */
    {
      SimpleNode jjtn003 = new SimpleNode(JJTVAR);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
    }
    try {
/*@egen*/ < VAR >/*@bgen(jjtree)*/
    } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
      }
    }
/*@egen*/     )  ("." t2 = < IDENTIFIER >/*@bgen(jjtree) Rhs */
  {
    SimpleNode jjtn004 = new SimpleNode(JJTRHS);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn004, true);
    jjtc004 = false;
  }
/*@egen*/  {    jjtn004.val = t2.image;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
    }
  }
/*@egen*/      )? ">"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}Token Op()       :{  Token t;}{  t = "+"  {    return t;  }| t = "-"  {    return t;  }}void Types()       :{}{/*@bgen(jjtree) Int8 */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTINT8);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/  < INT8 >/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/      |/*@bgen(jjtree) Int16 */
  {
    SimpleNode jjtn002 = new SimpleNode(JJTINT16);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/ < INT16 >/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/       |/*@bgen(jjtree) Int32 */
  {
    SimpleNode jjtn003 = new SimpleNode(JJTINT32);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
  }
  try {
/*@egen*/ < INT32 >/*@bgen(jjtree)*/
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
  }
/*@egen*/       |/*@bgen(jjtree) UInt8 */
  {
    SimpleNode jjtn004 = new SimpleNode(JJTUINT8);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
  }
  try {
/*@egen*/ < UINT8 >/*@bgen(jjtree)*/
  } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
    }
  }
/*@egen*/       |/*@bgen(jjtree) UInt16 */
  {
    SimpleNode jjtn005 = new SimpleNode(JJTUINT16);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
  }
  try {
/*@egen*/ < UINT16 >/*@bgen(jjtree)*/
  } finally {
    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005, true);
    }
  }
/*@egen*/        |/*@bgen(jjtree) UInt32 */
  {
    SimpleNode jjtn006 = new SimpleNode(JJTUINT32);
    boolean jjtc006 = true;
    jjtree.openNodeScope(jjtn006);
  }
  try {
/*@egen*/ < UINT32 >/*@bgen(jjtree)*/
  } finally {
    if (jjtc006) {
      jjtree.closeNodeScope(jjtn006, true);
    }
  }
/*@egen*/        |/*@bgen(jjtree) Char */
  {
    SimpleNode jjtn007 = new SimpleNode(JJTCHAR);
    boolean jjtc007 = true;
    jjtree.openNodeScope(jjtn007);
  }
  try {
/*@egen*/ < CHAR >/*@bgen(jjtree)*/
  } finally {
    if (jjtc007) {
      jjtree.closeNodeScope(jjtn007, true);
    }
  }
/*@egen*/      |/*@bgen(jjtree) Bool */
  {
    SimpleNode jjtn008 = new SimpleNode(JJTBOOL);
    boolean jjtc008 = true;
    jjtree.openNodeScope(jjtn008);
  }
  try {
/*@egen*/ < BOOL >/*@bgen(jjtree)*/
  } finally {
    if (jjtc008) {
      jjtree.closeNodeScope(jjtn008, true);
    }
  }
/*@egen*/      |/*@bgen(jjtree) Double */
  {
    SimpleNode jjtn009 = new SimpleNode(JJTDOUBLE);
    boolean jjtc009 = true;
    jjtree.openNodeScope(jjtn009);
  }
  try {
/*@egen*/ < DOUBLE >/*@bgen(jjtree)*/
  } finally {
    if (jjtc009) {
      jjtree.closeNodeScope(jjtn009, true);
    }
  }
/*@egen*/        |/*@bgen(jjtree) Single */
  {
    SimpleNode jjtn010 = new SimpleNode(JJTSINGLE);
    boolean jjtc010 = true;
    jjtree.openNodeScope(jjtn010);
  }
  try {
/*@egen*/ < SINGLE >/*@bgen(jjtree)*/
  } finally {
    if (jjtc010) {
      jjtree.closeNodeScope(jjtn010, true);
    }
  }
/*@egen*/        | Fixed()}void OpsForConvRules()       :{  Token t;}{  t = < STRING >/*@bgen(jjtree) Operation */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTOPERATION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
  }
/*@egen*/  {    jjtn001.val = t.image;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/            }void TypesOnCOnvRules()       :{}{  (    Types()  |/*@bgen(jjtree) Float */
    {
      SimpleNode jjtn001 = new SimpleNode(JJTFLOAT);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/ < FLOAT >/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/         |/*@bgen(jjtree) Int */
    {
      SimpleNode jjtn002 = new SimpleNode(JJTINT);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/ < INT >/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
    }
/*@egen*/     )}void IfConvRule()    :{/*@bgen(jjtree) If */
 SimpleNode jjtn000 = new SimpleNode(JJTIF);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; }{/*@bgen(jjtree) If */
  try {
/*@egen*/  < IF > ("("/*@bgen(jjtree) LeftOp */
  {
    SimpleNode jjtn002 = new SimpleNode(JJTLEFTOP);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/  (/*@bgen(jjtree) Lhs */
    {
      SimpleNode jjtn001 = new SimpleNode(JJTLHS);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/    < LHS >/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/       | CompleteIdentifier()  )/*@bgen(jjtree)*/
  } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      throw (RuntimeException)jjte002;
    }
    if (jjte002 instanceof ParseException) {
      throw (ParseException)jjte002;
    }
    throw (Error)jjte002;
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/          {}  (    t = ">="  | t = "<="  | t = ">"  | t = "<"  | t = "=="  | t = "!="  )/*@bgen(jjtree) RightOp */
  {
    SimpleNode jjtn003 = new SimpleNode(JJTRIGHTOP);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
  }
  try {
/*@egen*/  (    CompleteIdentifier()  | BuiltInFunctions() "("    (      CompleteIdentifier()      (        "," CompleteIdentifier()      )*    )?    ")"  )/*@bgen(jjtree)*/
  } catch (Throwable jjte003) {
    if (jjtc003) {
      jjtree.clearNodeScope(jjtn003);
      jjtc003 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte003 instanceof RuntimeException) {
      throw (RuntimeException)jjte003;
    }
    if (jjte003 instanceof ParseException) {
      throw (ParseException)jjte003;
    }
    throw (Error)jjte003;
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
  }
/*@egen*/           ")" )/*@bgen(jjtree) #Condition( 2) */
  {
    SimpleNode jjtn004 = new SimpleNode(JJTCONDITION);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn004,  2);
    jjtc004 = false;
  }
/*@egen*/  {	jjtn004.val = t.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004,  2);
    }
  }
/*@egen*/              /*@bgen(jjtree) Body */
  {
    SimpleNode jjtn005 = new SimpleNode(JJTBODY);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
  }
  try {
/*@egen*/  (    SimpleStatement()  | IfConvRule()  )+/*@bgen(jjtree)*/
  } catch (Throwable jjte005) {
    if (jjtc005) {
      jjtree.clearNodeScope(jjtn005);
      jjtc005 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte005 instanceof RuntimeException) {
      throw (RuntimeException)jjte005;
    }
    if (jjte005 instanceof ParseException) {
      throw (ParseException)jjte005;
    }
    throw (Error)jjte005;
  } finally {
    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005, true);
    }
  }
/*@egen*/        {}  (    < ELSE >/*@bgen(jjtree) Else */
    {
      SimpleNode jjtn006 = new SimpleNode(JJTELSE);
      boolean jjtc006 = true;
      jjtree.openNodeScope(jjtn006);
    }
    try {
/*@egen*/    (      SimpleStatement()    | IfConvRule()    )+/*@bgen(jjtree)*/
    } catch (Throwable jjte006) {
      if (jjtc006) {
        jjtree.clearNodeScope(jjtn006);
        jjtc006 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte006 instanceof RuntimeException) {
        throw (RuntimeException)jjte006;
      }
      if (jjte006 instanceof ParseException) {
        throw (ParseException)jjte006;
      }
      throw (Error)jjte006;
    } finally {
      if (jjtc006) {
        jjtree.closeNodeScope(jjtn006, true);
      }
    }
/*@egen*/        )?  < END >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SimpleStatement()      :{}{/*@bgen(jjtree) Ir */
  {
    SimpleNode jjtn002 = new SimpleNode(JJTIR);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/  (    < IR > "="    (/*@bgen(jjtree) Lhs */
      {
        SimpleNode jjtn001 = new SimpleNode(JJTLHS);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*/      < LHS >/*@bgen(jjtree)*/
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
        }
      }
/*@egen*/         | BuiltInFunctions() "("      (        CompleteIdentifier()        (          "," CompleteIdentifier()        )*      )?      ")"    | CompleteIdentifier()    )    ";"  )/*@bgen(jjtree)*/
  } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      throw (RuntimeException)jjte002;
    }
    if (jjte002 instanceof ParseException) {
      throw (ParseException)jjte002;
    }
    throw (Error)jjte002;
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/    |/*@bgen(jjtree) Assignment */
  {
    SimpleNode jjtn011 = new SimpleNode(JJTASSIGNMENT);
    boolean jjtc011 = true;
    jjtree.openNodeScope(jjtn011);
  }
  try {
/*@egen*/  (/*@bgen(jjtree) LeftOp */
    {
      SimpleNode jjtn003 = new SimpleNode(JJTLEFTOP);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
    }
    try {
/*@egen*/    CompleteIdentifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte003) {
      if (jjtc003) {
        jjtree.clearNodeScope(jjtn003);
        jjtc003 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte003 instanceof RuntimeException) {
        throw (RuntimeException)jjte003;
      }
      if (jjte003 instanceof ParseException) {
        throw (ParseException)jjte003;
      }
      throw (Error)jjte003;
    } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
      }
    }
/*@egen*/         "="/*@bgen(jjtree) RightOp */
    {
      SimpleNode jjtn010 = new SimpleNode(JJTRIGHTOP);
      boolean jjtc010 = true;
      jjtree.openNodeScope(jjtn010);
    }
    try {
/*@egen*/    (      (      CompleteIdentifier()    | BuiltInFunctions() "("      (        CompleteIdentifier()        (          "," CompleteIdentifier()        )*      )?      ")"    )    (      (/*@bgen(jjtree) Or */
        {
          SimpleNode jjtn004 = new SimpleNode(JJTOR);
          boolean jjtc004 = true;
          jjtree.openNodeScope(jjtn004);
        }
        try {
/*@egen*/        < OR >/*@bgen(jjtree)*/
        } finally {
          if (jjtc004) {
            jjtree.closeNodeScope(jjtn004, true);
          }
        }
/*@egen*/          |/*@bgen(jjtree) And */
        {
          SimpleNode jjtn005 = new SimpleNode(JJTAND);
          boolean jjtc005 = true;
          jjtree.openNodeScope(jjtn005);
        }
        try {
/*@egen*/ < AND >/*@bgen(jjtree)*/
        } finally {
          if (jjtc005) {
            jjtree.closeNodeScope(jjtn005, true);
          }
        }
/*@egen*/           |/*@bgen(jjtree) Xor */
        {
          SimpleNode jjtn006 = new SimpleNode(JJTXOR);
          boolean jjtc006 = true;
          jjtree.openNodeScope(jjtn006);
        }
        try {
/*@egen*/ < XOR >/*@bgen(jjtree)*/
        } finally {
          if (jjtc006) {
            jjtree.closeNodeScope(jjtn006, true);
          }
        }
/*@egen*/           |/*@bgen(jjtree) Mul */
        {
          SimpleNode jjtn007 = new SimpleNode(JJTMUL);
          boolean jjtc007 = true;
          jjtree.openNodeScope(jjtn007);
        }
        try {
/*@egen*/ "*"/*@bgen(jjtree)*/
        } finally {
          if (jjtc007) {
            jjtree.closeNodeScope(jjtn007, true);
          }
        }
/*@egen*/           |/*@bgen(jjtree) Sum */
        {
          SimpleNode jjtn008 = new SimpleNode(JJTSUM);
          boolean jjtc008 = true;
          jjtree.openNodeScope(jjtn008);
        }
        try {
/*@egen*/ "+"/*@bgen(jjtree)*/
        } finally {
          if (jjtc008) {
            jjtree.closeNodeScope(jjtn008, true);
          }
        }
/*@egen*/           |/*@bgen(jjtree) Sub */
        {
          SimpleNode jjtn009 = new SimpleNode(JJTSUB);
          boolean jjtc009 = true;
          jjtree.openNodeScope(jjtn009);
        }
        try {
/*@egen*/ "-"/*@bgen(jjtree)*/
        } finally {
          if (jjtc009) {
            jjtree.closeNodeScope(jjtn009, true);
          }
        }
/*@egen*/           )      (        CompleteIdentifier()      | BuiltInFunctions() "("        (          CompleteIdentifier()          (            "," CompleteIdentifier()          )*        )?        ")"      )    )?)/*@bgen(jjtree)*/
    } catch (Throwable jjte010) {
      if (jjtc010) {
        jjtree.clearNodeScope(jjtn010);
        jjtc010 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte010 instanceof RuntimeException) {
        throw (RuntimeException)jjte010;
      }
      if (jjte010 instanceof ParseException) {
        throw (ParseException)jjte010;
      }
      throw (Error)jjte010;
    } finally {
      if (jjtc010) {
        jjtree.closeNodeScope(jjtn010, true);
      }
    }
/*@egen*/             ";"  )/*@bgen(jjtree)*/
  } catch (Throwable jjte011) {
    if (jjtc011) {
      jjtree.clearNodeScope(jjtn011);
      jjtc011 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte011 instanceof RuntimeException) {
      throw (RuntimeException)jjte011;
    }
    if (jjte011 instanceof ParseException) {
      throw (ParseException)jjte011;
    }
    throw (Error)jjte011;
  } finally {
    if (jjtc011) {
      jjtree.closeNodeScope(jjtn011, true);
    }
  }
/*@egen*/            }void FixedPointProperties()       :{}{/*@bgen(jjtree) Overflow */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTOVERFLOW);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/  < OVERFLOW >/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/          |/*@bgen(jjtree) Round */
  {
    SimpleNode jjtn002 = new SimpleNode(JJTROUND);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/ < ROUND >/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/       }void ValuesFixedPointProperties()       :{}{/*@bgen(jjtree) Wrap */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTWRAP);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/  < WRAP >/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/      |/*@bgen(jjtree) Floor */
  {
    SimpleNode jjtn002 = new SimpleNode(JJTFLOOR);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/ < FLOOR >/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/       }void SetOfJPs()       :{  Token t;}{  t = < IDENTIFIER >/*@bgen(jjtree) Elem */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTELEM);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
  }
/*@egen*/  {    jjtn001.val = t.image;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/       | ("{" (Identifier() ("," Identifier()) *) "}")}void Identifier()       :{  Token t;}{  t = < IDENTIFIER >/*@bgen(jjtree) Elem */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTELEM);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
  }
/*@egen*/  {    jjtn001.val = t.image;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/       }void JPList()       :{}{  JP()  (    "," JP()  )*}void JP()       :{  Token t;}{  (    (      ("@")? t = < IDENTIFIER >/*@bgen(jjtree) Elem */
      {
        SimpleNode jjtn001 = new SimpleNode(JJTELEM);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*//*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn001, true);
        jjtc001 = false;
      }
/*@egen*/      {        jjtn001.val = t.image;      }/*@bgen(jjtree)*/
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
        }
      }
/*@egen*/           )  |/*@bgen(jjtree) End */
    {
      SimpleNode jjtn002 = new SimpleNode(JJTEND);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/ < END >/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
    }
/*@egen*/       |/*@bgen(jjtree) If */
    {
      SimpleNode jjtn003 = new SimpleNode(JJTIF);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
    }
    try {
/*@egen*/ < IF >/*@bgen(jjtree)*/
    } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
      }
    }
/*@egen*/      |/*@bgen(jjtree) Else */
    {
      SimpleNode jjtn004 = new SimpleNode(JJTELSE);
      boolean jjtc004 = true;
      jjtree.openNodeScope(jjtn004);
    }
    try {
/*@egen*/ < ELSE >/*@bgen(jjtree)*/
    } finally {
      if (jjtc004) {
        jjtree.closeNodeScope(jjtn004, true);
      }
    }
/*@egen*/      )}void DependentStmt() :{/*@bgen(jjtree) DependentStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTDEPENDENTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) DependentStmt */
  try {
/*@egen*/  < FOREACH >  {    int argCounter = 1;  }  (/*@bgen(jjtree) Key */
    {
      SimpleNode jjtn001 = new SimpleNode(JJTKEY);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/    < KEY >/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/       |/*@bgen(jjtree) Tag */
    {
      SimpleNode jjtn002 = new SimpleNode(JJTTAG);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/ < TAG >/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
    }
/*@egen*/       |/*@bgen(jjtree) Var */
    {
      SimpleNode jjtn003 = new SimpleNode(JJTVAR);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
    }
    try {
/*@egen*/ < VAR >/*@bgen(jjtree)*/
    } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
      }
    }
/*@egen*/     )/*@bgen(jjtree) #Iter( argCounter) */
  {
    SimpleNode jjtn005 = new SimpleNode(JJTITER);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
  }
  try {
/*@egen*/  (t = < IDENTIFIER >/*@bgen(jjtree) Elem */
  {
    SimpleNode jjtn004 = new SimpleNode(JJTELEM);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn004, true);
    jjtc004 = false;
  }
/*@egen*/  {    jjtn004.val = t.image;    argCounter++;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
    }
  }
/*@egen*/       )?/*@bgen(jjtree)*/
  } finally {
    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005,  argCounter);
    }
  }
/*@egen*/                  < IN >/*@bgen(jjtree) IterList */
{
  SimpleNode jjtn010 = new SimpleNode(JJTITERLIST);
  boolean jjtc010 = true;
  jjtree.openNodeScope(jjtn010);
}
try {
/*@egen*/(  (    < IDENTIFIER >  |    (      (/*@bgen(jjtree) Program */
        {
          SimpleNode jjtn006 = new SimpleNode(JJTPROGRAM);
          boolean jjtc006 = true;
          jjtree.openNodeScope(jjtn006);
        }
        try {
/*@egen*/        < PROGRAM >/*@bgen(jjtree)*/
        } finally {
          if (jjtc006) {
            jjtree.closeNodeScope(jjtn006, true);
          }
        }
/*@egen*/               |/*@bgen(jjtree) Function */
        {
          SimpleNode jjtn007 = new SimpleNode(JJTFUNCTION);
          boolean jjtc007 = true;
          jjtree.openNodeScope(jjtn007);
        }
        try {
/*@egen*/ < FUNCTION >/*@bgen(jjtree)*/
        } finally {
          if (jjtc007) {
            jjtree.closeNodeScope(jjtn007, true);
          }
        }
/*@egen*/          )      (":" t = < IDENTIFIER >/*@bgen(jjtree) Colons */
      {
        SimpleNode jjtn008 = new SimpleNode(JJTCOLONS);
        boolean jjtc008 = true;
        jjtree.openNodeScope(jjtn008);
      }
      try {
/*@egen*//*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn008, true);
        jjtc008 = false;
      }
/*@egen*/      {        jjtn008.val = t.image;      }/*@bgen(jjtree)*/
      } finally {
        if (jjtc008) {
          jjtree.closeNodeScope(jjtn008, true);
        }
      }
/*@egen*/             )?    )  )| "{"/*@bgen(jjtree) List */
      {
        SimpleNode jjtn009 = new SimpleNode(JJTLIST);
        boolean jjtc009 = true;
        jjtree.openNodeScope(jjtn009);
      }
      try {
/*@egen*/ JPList()/*@bgen(jjtree)*/
      } catch (Throwable jjte009) {
        if (jjtc009) {
          jjtree.clearNodeScope(jjtn009);
          jjtc009 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte009 instanceof RuntimeException) {
          throw (RuntimeException)jjte009;
        }
        if (jjte009 instanceof ParseException) {
          throw (ParseException)jjte009;
        }
        throw (Error)jjte009;
      } finally {
        if (jjtc009) {
          jjtree.closeNodeScope(jjtn009, true);
        }
      }
/*@egen*/       "}")/*@bgen(jjtree)*/
} catch (Throwable jjte010) {
  if (jjtc010) {
    jjtree.clearNodeScope(jjtn010);
    jjtc010 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte010 instanceof RuntimeException) {
    throw (RuntimeException)jjte010;
  }
  if (jjte010 instanceof ParseException) {
    throw (ParseException)jjte010;
  }
  throw (Error)jjte010;
} finally {
  if (jjtc010) {
    jjtree.closeNodeScope(jjtn010, true);
  }
}
/*@egen*/           < DO > ((Insert()| Set()) +)< END >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void OpsForConfigRules()       :{  Token t;}{  t = < STRING >/*@bgen(jjtree) OpsConfigRules */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTOPSCONFIGRULES);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
  }
/*@egen*/  {    jjtn001.val = t.image;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/                 }void Decompose():{/*@bgen(jjtree) Decompose */
  SimpleNode jjtn000 = new SimpleNode(JJTDECOMPOSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) Decompose */
  try {
/*@egen*/  < DECOMPOSE > t = < TARGETCODE >/*@bgen(jjtree) TargetCode */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTTARGETCODE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
  }
/*@egen*/  {    jjtn001.val = t.image;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/              ";"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Fixed():{/*@bgen(jjtree) Fixed */
  SimpleNode jjtn000 = new SimpleNode(JJTFIXED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Fixed */
  try {
/*@egen*/  < FIXED >  (    "<" Number() "," Number() "," Number() ">"  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Number() :{/*@bgen(jjtree) Number */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) Number */
  try {
/*@egen*/  t = < NUMBER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.val = t.image;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void CompleteIdentifier()       :{/*@bgen(jjtree) Ident */
 SimpleNode jjtn000 = new SimpleNode(JJTIDENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) Ident */
  try {
/*@egen*/  t = < IDENTIFIER >/*@bgen(jjtree) Left */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTLEFT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
  }
/*@egen*/  {    jjtn001.val = t.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/       {}  (    "."    (      t = < IDENTIFIER >/*@bgen(jjtree) Right */
      {
        SimpleNode jjtn002 = new SimpleNode(JJTRIGHT);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*//*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn002, true);
        jjtc002 = false;
      }
/*@egen*/      {		jjtn002.val = t.image;
      }/*@bgen(jjtree)*/
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002, true);
        }
      }
/*@egen*/           |/*@bgen(jjtree) Right */
      {
        SimpleNode jjtn003 = new SimpleNode(JJTRIGHT);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
      }
      try {
/*@egen*/ BuiltInFunctions()/*@bgen(jjtree)*/
      } catch (Throwable jjte003) {
        if (jjtc003) {
          jjtree.clearNodeScope(jjtn003);
          jjtc003 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte003 instanceof RuntimeException) {
          throw (RuntimeException)jjte003;
        }
        if (jjte003 instanceof ParseException) {
          throw (ParseException)jjte003;
        }
        throw (Error)jjte003;
      } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003, true);
        }
      }
/*@egen*/           )     {}  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void BuiltInFunctions()      :{}{/*@bgen(jjtree) Max */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTMAX);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/  < MAX >/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/     |/*@bgen(jjtree) Min */
  {
    SimpleNode jjtn002 = new SimpleNode(JJTMIN);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/ < MIN >/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/     }