/* Generated By:JJTree&JavaCC: Do not edit this line. DSL_LARA.java */
package pack;
import java.util.ArrayList;
import java.util.HashMap;

public class DSL_LARA/*@bgen(jjtree)*/implements DSL_LARATreeConstants, DSL_LARAConstants {/*@bgen(jjtree)*/
  protected static JJTDSL_LARAState jjtree = new JJTDSL_LARAState();public static void main(String args []) throws ParseException
  {
    DSL_LARA myConverter = new DSL_LARA(System.in);
    SimpleNode root = myConverter.Start();
    //root.dump("");    myConverter.createSymbolTable(root);
    myConverter.doSemanticAnalysis();
  }
  SymbolTable symbolTable = new SymbolTable();
  /*
   * Variables used to create the symbol table
   */
  String parsingRule = "";
  boolean parsingSetType = false;
  boolean parsingSet = false;
  boolean parsingForEachStatement = false;
  boolean parsingIter = false;
  boolean parsingTag = false;
  ArrayList < ArrayList < String >> forEachStatements = new ArrayList < ArrayList < String >> ();
  ArrayList < ArrayList < String >> forEachUsedVars = new ArrayList < ArrayList < String >> ();
  int forDepth = 0;

  void doSemanticAnalysis()
  {
    for (String rule : symbolTable.getApplyList())
    {
      if (!symbolTable.containsRule(rule))
      {
        System.out.println(" ! Rule '" + rule + "' was applied and not declared");
      }
    }
    for (String rule : symbolTable.getUseList())
    {
      if (!symbolTable.containsRule(rule))
      {
        System.out.println(" ! Rule '" + rule + "' was used and not declared");
      }
    }
    HashMap < String, RuleSymbolTable > ruleMap = symbolTable.getRules();
    for (String rule : ruleMap.keySet())
    {
      /*
       * Sets
       */
      for (String set : ruleMap.get(rule).getUsedSets())
      {
        if (!ruleMap.get(rule).containsSet(set))
        {
          System.out.println(" ! Set '" + set + "' was used without being declared on rule '" + rule + "'");
        }
      }
          /*
       * SetTypes
       */
      for (String typedef : ruleMap.get(rule).getSetTypes())
      {
        if (!ruleMap.get(rule).containsTypeDef(typedef))
        {
          System.out.println(" ! TypeDef '" + typedef + "' was not declared on rule '" + rule + "'");
        }
      }
          /* ArrayList<ArrayList <String >> statement : ruleMap.get(rule).getForEachsUsedVars()
       * Vars in ForEach statements
       */

      for (int i = 0; i < ruleMap.get(rule).getForEachsUsedVars().size(); i++)
      {
        ArrayList<ArrayList <String >> statement = ruleMap.get(rule).getForEachsUsedVars().get(i);

        for (ArrayList < String > varList : statement)
        {
                        for (String var : varList)
                        {
                                if (!ruleMap.get(rule).containsForDeclared(i, var))
                                {
                                        System.out.println(" ! Identifier '" + var + "' not defined on rule '" + rule + "'");
                                }
                        }
        }
      }
    }
  }

  void createSymbolTable(SimpleNode node)
  {
    if (parsingForEachStatement && node.toString() == "Identifier")
    {
      forEachUsedVars.get(forEachStatements.size() - 1).add(node.val);
    }
    if (parsingSetType)
    {
      if (node.val != null) symbolTable.addSetType(parsingRule, node.val);
      parsingSetType = false;
    }
    else if (parsingIter)
    {
      parsingTag = true;
      parsingIter = false;
    }
    else if (parsingTag)
    {
      parsingTag = false;
      if (node.val != null && node.toString() == "Elem") forEachStatements.get(forEachStatements.size() - 1).add(node.val);
    }
    switch (node.toString())
    {
      case "Apply" : symbolTable.addApplyRule(node.val);
      break;
      case "Rule" : symbolTable.addRule(node.val);
      parsingRule = node.val;
      break;
      case "Use" : if (node.val != null)
      {
        symbolTable.addUse(node.val);
      }
      break;
      case "TypeDef" : symbolTable.addTypeDef(parsingRule, node.val);
      break;
      case "Set" : parsingSet = true;
      break;
      case "Lhs" : if (parsingSet)
      {
        if (node.val.equals("type")) parsingSetType = true;
        else symbolTable.addSet(parsingRule, node.val);
        parsingSet = false;
      }
      break;
      case "IterList" : if (node.val != null) symbolTable.addUsedSet(parsingRule, node.val);
      break;
      case "ForEachStatement" : forEachStatements.add(new ArrayList < String > ());
      forEachUsedVars.add(new ArrayList < String > ());
      forDepth++;
      parsingForEachStatement = true;
      break;
      case "DependentStmt" : forEachStatements.add(new ArrayList < String > ());
      forEachUsedVars.add(new ArrayList < String > ());
      forDepth++;
      parsingForEachStatement = true;
      case "Iter" : if (parsingForEachStatement) parsingIter = true;
      break;
    }
    for (int i = 0; i < node.jjtGetNumChildren(); ++i)
    {
      SimpleNode n = (SimpleNode) node.jjtGetChild(i);
      if (n != null)
      {
        createSymbolTable(n);
      }
    }
    // adicionar variaveis do foreach à symbol table
    if ((node.toString() == "ForEachStatement" || node.toString() == "DependentStmt") && forDepth > 0)
    {
      forDepth--;
      if (forDepth == 0)
      {
        symbolTable.addForEachsDeclared(parsingRule, forEachStatements);
        symbolTable.addForEachsUsed(parsingRule, forEachUsedVars);
        parsingForEachStatement = false;
        forEachStatements = new ArrayList < ArrayList < String >> ();
        forEachUsedVars = new ArrayList < ArrayList < String >> ();
      }
    }
  }
  String eval(SimpleNode node)
  {
    return "";
  }

  static final public SimpleNode Start() throws ParseException {
 /*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case APPLY:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        jj_consume_token(APPLY);
        t = jj_consume_token(IDENTIFIER);
      SimpleNode jjtn001 = new SimpleNode(JJTAPPLY);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
        try {
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
      jjtn001.val = t.image;
        } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
        }

        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 74:
            ;
            break;
          default:
            jj_la1[1] = jj_gen;
            break label_2;
          }
          jj_consume_token(74);
          t = jj_consume_token(IDENTIFIER);
      SimpleNode jjtn002 = new SimpleNode(JJTAPPLY);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
          try {
      jjtree.closeNodeScope(jjtn002, true);
      jjtc002 = false;
      jjtn002.val = t.image;
          } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
          }
        }
        jj_consume_token(75);
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RULE:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_3;
        }
        Rule();
      }
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
  {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Rule() throws ParseException {
 /*@bgen(jjtree) Rule */
  SimpleNode jjtn000 = new SimpleNode(JJTRULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(RULE);
      t = jj_consume_token(IDENTIFIER);
    jjtn000.val = t.image;
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case USE:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_4;
        }
        Use();
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FOREACH:
        case SET:
        case WITH:
        case IF:
        case INSERT:
        case TYPEDEF:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_5;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FOREACH:
        case SET:
        case WITH:
        case INSERT:
          Statement();
          break;
        case IF:
          InjectCode();
          break;
        case TYPEDEF:
          TypeDef();
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMUTATIVE:
        case OPERATION:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_6;
        }
        DataTypeConvRules();
      }
      jj_consume_token(END);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Use() throws ParseException {
  Token t;
    jj_consume_token(USE);
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(75);
    SimpleNode jjtn001 = new SimpleNode(JJTUSE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
    jjtn001.val = t.image;
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
  }

  static final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FOREACH:
      ForEachStatement();
      break;
    case INSERT:
      Insert();
      break;
    case SET:
      Set();
      break;
    case WITH:
      WithStatement();
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void InjectCode() throws ParseException {
 /*@bgen(jjtree) IfStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t, u, v;
    try {
      jj_consume_token(IF);
      u = jj_consume_token(IDENTIFIER);
      jj_consume_token(74);
      v = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 76:
        t = jj_consume_token(76);
        break;
      case 77:
        t = jj_consume_token(77);
        break;
      case 78:
        t = jj_consume_token(78);
        break;
      case 79:
        t = jj_consume_token(79);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    SimpleNode jjtn001 = new SimpleNode(JJTLEFT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
    jjtn001.val = u.image;
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
    SimpleNode jjtn002 = new SimpleNode(JJTRIGHT);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
      try {
    jjtree.closeNodeScope(jjtn002, true);
    jjtc002 = false;
    jjtn002.val = v.image;
      } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
      }
    SimpleNode jjtn003 = new SimpleNode(JJTLEFTOP);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
      try {
    jjtree.closeNodeScope(jjtn003,  2);
    jjtc003 = false;

      } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003,  2);
    }
      }
  SimpleNode jjtn004 = new SimpleNode(JJTRIGHTOP);
  boolean jjtc004 = true;
  jjtree.openNodeScope(jjtn004);
      try {
        Number();
      } catch (Throwable jjte004) {
  if (jjtc004) {
    jjtree.clearNodeScope(jjtn004);
    jjtc004 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte004 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte004;}
  }
  if (jjte004 instanceof ParseException) {
    {if (true) throw (ParseException)jjte004;}
  }
  {if (true) throw (Error)jjte004;}
      } finally {
  if (jjtc004) {
    jjtree.closeNodeScope(jjtn004, true);
  }
      }
  SimpleNode jjtn005 = new SimpleNode(JJTCONDITION);
  boolean jjtc005 = true;
  jjtree.openNodeScope(jjtn005);
      try {
  jjtree.closeNodeScope(jjtn005,  2);
  jjtc005 = false;
  jjtn005.val = t.image;
      } finally {
  if (jjtc005) {
    jjtree.closeNodeScope(jjtn005,  2);
  }
      }
  SimpleNode jjtn006 = new SimpleNode(JJTBODY);
  boolean jjtc006 = true;
  jjtree.openNodeScope(jjtn006);
      try {
        label_7:
        while (true) {
          TargetCode();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FPRINTF:
          case PRINT:
          case WARNING:
          case TARGETCODE:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[9] = jj_gen;
            break label_7;
          }
        }
      } catch (Throwable jjte006) {
  if (jjtc006) {
    jjtree.clearNodeScope(jjtn006);
    jjtc006 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte006 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte006;}
  }
  if (jjte006 instanceof ParseException) {
    {if (true) throw (ParseException)jjte006;}
  }
  {if (true) throw (Error)jjte006;}
      } finally {
  if (jjtc006) {
    jjtree.closeNodeScope(jjtn006, true);
  }
      }
      jj_consume_token(END);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void TypeDef() throws ParseException {
 /*@bgen(jjtree) TypeDef */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPEDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(TYPEDEF);
      t = jj_consume_token(IDENTIFIER);
    jjtn000.val = t.image;
      jj_consume_token(80);
      Types();
      jj_consume_token(75);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void DataTypeConvRules() throws ParseException {
 /*@bgen(jjtree) DataTypeConvRules */
  SimpleNode jjtn000 = new SimpleNode(JJTDATATYPECONVRULES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMUTATIVE:
     SimpleNode jjtn001 = new SimpleNode(JJTCOMUTATIVE);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(COMMUTATIVE);
        } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
        }
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      jj_consume_token(OPERATION);
      OpsForConvRules();
    SimpleNode jjtn004 = new SimpleNode(JJTARGS);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
      try {
        TypesOnCOnvRules();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LHS:
        SimpleNode jjtn002 = new SimpleNode(JJTLHS);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
          try {
            jj_consume_token(LHS);
          } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002, true);
        }
          }
          break;
        case IDENTIFIER:
          t = jj_consume_token(IDENTIFIER);
        SimpleNode jjtn003 = new SimpleNode(JJTIDENT);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
          try {
        jjtree.closeNodeScope(jjtn003, true);
        jjtc003 = false;
        jjtn003.val = t.image;
          } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003, true);
        }
          }
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte004) {
    if (jjtc004) {
      jjtree.clearNodeScope(jjtn004);
      jjtc004 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte004 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte004;}
    }
    if (jjte004 instanceof ParseException) {
      {if (true) throw (ParseException)jjte004;}
    }
    {if (true) throw (Error)jjte004;}
      } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
    }
      }
      jj_consume_token(81);
                  SimpleNode jjtn014 = new SimpleNode(JJTTEMPVARS);
                  boolean jjtc014 = true;
                  jjtree.openNodeScope(jjtn014);
      try {
                   SimpleNode jjtn008 = new SimpleNode(JJTBRACKETS);
                   boolean jjtc008 = true;
                   jjtree.openNodeScope(jjtn008);
        try {
          jj_consume_token(82);
                        SimpleNode jjtn007 = new SimpleNode(JJTTYPE);
                        boolean jjtc007 = true;
                        jjtree.openNodeScope(jjtn007);
          try {
            TypesOnCOnvRules();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IR:
                                             SimpleNode jjtn005 = new SimpleNode(JJTIR);
                                             boolean jjtc005 = true;
                                             jjtree.openNodeScope(jjtn005);
              try {
                jj_consume_token(IR);
              } finally {
                                             if (jjtc005) {
                                               jjtree.closeNodeScope(jjtn005, true);
                                             }
              }
              break;
            case IDENTIFIER:
              t = jj_consume_token(IDENTIFIER);
    SimpleNode jjtn006 = new SimpleNode(JJTIDENT);
    boolean jjtc006 = true;
    jjtree.openNodeScope(jjtn006);
              try {
    jjtree.closeNodeScope(jjtn006, true);
    jjtc006 = false;
    jjtn006.val = t.image;
              } finally {
    if (jjtc006) {
      jjtree.closeNodeScope(jjtn006, true);
    }
              }
              break;
            default:
              jj_la1[12] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          } catch (Throwable jjte007) {
                        if (jjtc007) {
                          jjtree.clearNodeScope(jjtn007);
                          jjtc007 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte007 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte007;}
                        }
                        if (jjte007 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte007;}
                        }
                        {if (true) throw (Error)jjte007;}
          } finally {
                        if (jjtc007) {
                          jjtree.closeNodeScope(jjtn007, true);
                        }
          }
          jj_consume_token(83);
        } catch (Throwable jjte008) {
                   if (jjtc008) {
                     jjtree.clearNodeScope(jjtn008);
                     jjtc008 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte008 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte008;}
                   }
                   if (jjte008 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte008;}
                   }
                   {if (true) throw (Error)jjte008;}
        } finally {
                   if (jjtc008) {
                     jjtree.closeNodeScope(jjtn008, true);
                   }
        }

    SimpleNode jjtn013 = new SimpleNode(JJTSQUAREBRACKETS);
    boolean jjtc013 = true;
    jjtree.openNodeScope(jjtn013);
        try {
          jj_consume_token(84);
          SimpleNode jjtn010 = new SimpleNode(JJTTYPE);
          boolean jjtc010 = true;
          jjtree.openNodeScope(jjtn010);
          try {
            TypesOnCOnvRules();
            t = jj_consume_token(IDENTIFIER);
    SimpleNode jjtn009 = new SimpleNode(JJTIDENT);
    boolean jjtc009 = true;
    jjtree.openNodeScope(jjtn009);
            try {
    jjtree.closeNodeScope(jjtn009, true);
    jjtc009 = false;
    jjtn009.val = t.image;
            } finally {
    if (jjtc009) {
      jjtree.closeNodeScope(jjtn009, true);
    }
            }
          } catch (Throwable jjte010) {
          if (jjtc010) {
            jjtree.clearNodeScope(jjtn010);
            jjtc010 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte010 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte010;}
          }
          if (jjte010 instanceof ParseException) {
            {if (true) throw (ParseException)jjte010;}
          }
          {if (true) throw (Error)jjte010;}
          } finally {
          if (jjtc010) {
            jjtree.closeNodeScope(jjtn010, true);
          }
          }

          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 85:
            jj_consume_token(85);
         SimpleNode jjtn012 = new SimpleNode(JJTTYPE);
         boolean jjtc012 = true;
         jjtree.openNodeScope(jjtn012);
            try {
              TypesOnCOnvRules();
              t = jj_consume_token(IDENTIFIER);
    SimpleNode jjtn011 = new SimpleNode(JJTIDENT);
    boolean jjtc011 = true;
    jjtree.openNodeScope(jjtn011);
              try {
    jjtree.closeNodeScope(jjtn011, true);
    jjtc011 = false;
    jjtn011.val = t.image;
              } finally {
    if (jjtc011) {
      jjtree.closeNodeScope(jjtn011, true);
    }
              }
            } catch (Throwable jjte012) {
         if (jjtc012) {
           jjtree.clearNodeScope(jjtn012);
           jjtc012 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte012 instanceof RuntimeException) {
           {if (true) throw (RuntimeException)jjte012;}
         }
         if (jjte012 instanceof ParseException) {
           {if (true) throw (ParseException)jjte012;}
         }
         {if (true) throw (Error)jjte012;}
            } finally {
         if (jjtc012) {
           jjtree.closeNodeScope(jjtn012, true);
         }
            }

            break;
          default:
            jj_la1[13] = jj_gen;
            ;
          }
          jj_consume_token(86);
        } catch (Throwable jjte013) {
    if (jjtc013) {
      jjtree.clearNodeScope(jjtn013);
      jjtc013 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte013 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte013;}
    }
    if (jjte013 instanceof ParseException) {
      {if (true) throw (ParseException)jjte013;}
    }
    {if (true) throw (Error)jjte013;}
        } finally {
    if (jjtc013) {
      jjtree.closeNodeScope(jjtn013, true);
    }
        }
      } catch (Throwable jjte014) {
                  if (jjtc014) {
                    jjtree.clearNodeScope(jjtn014);
                    jjtc014 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte014 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte014;}
                  }
                  if (jjte014 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte014;}
                  }
                  {if (true) throw (Error)jjte014;}
      } finally {
                  if (jjtc014) {
                    jjtree.closeNodeScope(jjtn014, true);
                  }
      }
      jj_consume_token(74);
                                             SimpleNode jjtn015 = new SimpleNode(JJTRULES);
                                             boolean jjtc015 = true;
                                             jjtree.openNodeScope(jjtn015);
      try {
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IF:
            IfConvRule();
            break;
          case IR:
          case IDENTIFIER:
            SimpleStatement();
            break;
          default:
            jj_la1[14] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IR:
          case IF:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[15] = jj_gen;
            break label_8;
          }
        }
      } catch (Throwable jjte015) {
                                             if (jjtc015) {
                                               jjtree.clearNodeScope(jjtn015);
                                               jjtc015 = false;
                                             } else {
                                               jjtree.popNode();
                                             }
                                             if (jjte015 instanceof RuntimeException) {
                                               {if (true) throw (RuntimeException)jjte015;}
                                             }
                                             if (jjte015 instanceof ParseException) {
                                               {if (true) throw (ParseException)jjte015;}
                                             }
                                             {if (true) throw (Error)jjte015;}
      } finally {
                                             if (jjtc015) {
                                               jjtree.closeNodeScope(jjtn015, true);
                                             }
      }
      jj_consume_token(END);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ForEachStatement() throws ParseException {
 /*@bgen(jjtree) ForEachStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTFOREACHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(FOREACH);
      int argCounter = 1;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KEY:
        SimpleNode jjtn001 = new SimpleNode(JJTKEY);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(KEY);
        } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
        }
        }
        break;
      case TAG:
        SimpleNode jjtn002 = new SimpleNode(JJTTAG);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(TAG);
        } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002, true);
        }
        }
        break;
      case VAR:
        SimpleNode jjtn003 = new SimpleNode(JJTVAR);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
        try {
          jj_consume_token(VAR);
        } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003, true);
        }
        }
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      SimpleNode jjtn005 = new SimpleNode(JJTITER);
      boolean jjtc005 = true;
      jjtree.openNodeScope(jjtn005);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          t = jj_consume_token(IDENTIFIER);
      SimpleNode jjtn004 = new SimpleNode(JJTELEM);
      boolean jjtc004 = true;
      jjtree.openNodeScope(jjtn004);
          try {
      jjtree.closeNodeScope(jjtn004, true);
      jjtc004 = false;
      jjtn004.val = t.image;
      argCounter++;
          } finally {
      if (jjtc004) {
        jjtree.closeNodeScope(jjtn004, true);
      }
          }
          break;
        default:
          jj_la1[17] = jj_gen;
          ;
        }
      } finally {
      if (jjtc005) {
        jjtree.closeNodeScope(jjtn005,  argCounter);
      }
      }
      jj_consume_token(IN);
    SimpleNode jjtn011 = new SimpleNode(JJTITERLIST);
    boolean jjtc011 = true;
    jjtree.openNodeScope(jjtn011);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FUNCTION:
        case PROGRAM:
        case IDENTIFIER:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            t = jj_consume_token(IDENTIFIER);
        jjtn011.val = t.image;
            break;
          case FUNCTION:
          case PROGRAM:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case PROGRAM:
            SimpleNode jjtn006 = new SimpleNode(JJTPROGRAM);
            boolean jjtc006 = true;
            jjtree.openNodeScope(jjtn006);
              try {
                jj_consume_token(PROGRAM);
              } finally {
            if (jjtc006) {
              jjtree.closeNodeScope(jjtn006, true);
            }
              }
              break;
            case FUNCTION:
            SimpleNode jjtn007 = new SimpleNode(JJTFUNCTION);
            boolean jjtc007 = true;
            jjtree.openNodeScope(jjtn007);
              try {
                jj_consume_token(FUNCTION);
              } finally {
            if (jjtc007) {
              jjtree.closeNodeScope(jjtn007, true);
            }
              }
              break;
            default:
              jj_la1[18] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 80:
              jj_consume_token(80);
                SimpleNode jjtn008 = new SimpleNode(JJTEQUALS);
                boolean jjtc008 = true;
                jjtree.openNodeScope(jjtn008);
              try {
                SetOfJPs();
              } catch (Throwable jjte008) {
                if (jjtc008) {
                  jjtree.clearNodeScope(jjtn008);
                  jjtc008 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte008 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte008;}
                }
                if (jjte008 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte008;}
                }
                {if (true) throw (Error)jjte008;}
              } finally {
                if (jjtc008) {
                  jjtree.closeNodeScope(jjtn008, true);
                }
              }
              break;
            default:
              jj_la1[19] = jj_gen;
              ;
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 74:
              jj_consume_token(74);
              SimpleNode jjtn009 = new SimpleNode(JJTCOLONS);
              boolean jjtc009 = true;
              jjtree.openNodeScope(jjtn009);
              try {
                SetOfJPs();
              } catch (Throwable jjte009) {
              if (jjtc009) {
                jjtree.clearNodeScope(jjtn009);
                jjtc009 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte009 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte009;}
              }
              if (jjte009 instanceof ParseException) {
                {if (true) throw (ParseException)jjte009;}
              }
              {if (true) throw (Error)jjte009;}
              } finally {
              if (jjtc009) {
                jjtree.closeNodeScope(jjtn009, true);
              }
              }
              break;
            default:
              jj_la1[20] = jj_gen;
              ;
            }
            break;
          default:
            jj_la1[21] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[22] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 87:
          jj_consume_token(87);
            SimpleNode jjtn010 = new SimpleNode(JJTLIST);
            boolean jjtc010 = true;
            jjtree.openNodeScope(jjtn010);
          try {
            JPList();
          } catch (Throwable jjte010) {
            if (jjtc010) {
              jjtree.clearNodeScope(jjtn010);
              jjtc010 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte010 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte010;}
            }
            if (jjte010 instanceof ParseException) {
              {if (true) throw (ParseException)jjte010;}
            }
            {if (true) throw (Error)jjte010;}
          } finally {
            if (jjtc010) {
              jjtree.closeNodeScope(jjtn010, true);
            }
          }
          jj_consume_token(88);
          break;
        default:
          jj_la1[23] = jj_gen;
          ;
        }
      } catch (Throwable jjte011) {
    if (jjtc011) {
      jjtree.clearNodeScope(jjtn011);
      jjtc011 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte011 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte011;}
    }
    if (jjte011 instanceof ParseException) {
      {if (true) throw (ParseException)jjte011;}
    }
    {if (true) throw (Error)jjte011;}
      } finally {
    if (jjtc011) {
      jjtree.closeNodeScope(jjtn011, true);
    }
      }
      jj_consume_token(DO);
    int instCounter = 0;
    SimpleNode jjtn012 = new SimpleNode(JJTBODY);
    boolean jjtc012 = true;
    jjtree.openNodeScope(jjtn012);
      try {
        label_9:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INSERT:
            Insert();
            break;
          case SET:
            Set();
            break;
          default:
            jj_la1[24] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DEPENDENT:
            jj_consume_token(DEPENDENT);
            jj_consume_token(74);
            label_10:
            while (true) {
              DependentStmt();
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case FOREACH:
                ;
                break;
              default:
                jj_la1[25] = jj_gen;
                break label_10;
              }
            }
            jj_consume_token(END);
            break;
          default:
            jj_la1[26] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SET:
          case INSERT:
            ;
            break;
          default:
            jj_la1[27] = jj_gen;
            break label_9;
          }
        }
      } catch (Throwable jjte012) {
    if (jjtc012) {
      jjtree.clearNodeScope(jjtn012);
      jjtc012 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte012 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte012;}
    }
    if (jjte012 instanceof ParseException) {
      {if (true) throw (ParseException)jjte012;}
    }
    {if (true) throw (Error)jjte012;}
      } finally {
    if (jjtc012) {
      jjtree.closeNodeScope(jjtn012, true);
    }
      }
      jj_consume_token(END);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Insert() throws ParseException {
 /*@bgen(jjtree) Insert */
  SimpleNode jjtn000 = new SimpleNode(JJTINSERT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INSERT);
      jj_consume_token(89);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BEFORE:
      SimpleNode jjtn001 = new SimpleNode(JJTBEFORE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(BEFORE);
        } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
        }
        break;
      case AFTER:
      SimpleNode jjtn002 = new SimpleNode(JJTAFTER);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(AFTER);
        } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
        }
        break;
      case AROUND:
      SimpleNode jjtn003 = new SimpleNode(JJTAROUND);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
        try {
          jj_consume_token(AROUND);
        } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
      }
        }
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    int argCounter = 1;
    SimpleNode jjtn006 = new SimpleNode(JJTARGS);
    boolean jjtc006 = true;
    jjtree.openNodeScope(jjtn006);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 89:
          jj_consume_token(89);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case END:
        SimpleNode jjtn004 = new SimpleNode(JJTEND);
        boolean jjtc004 = true;
        jjtree.openNodeScope(jjtn004);
            try {
              jj_consume_token(END);
            } finally {
        if (jjtc004) {
          jjtree.closeNodeScope(jjtn004, true);
        }
            }
            break;
          case BEGIN:
        SimpleNode jjtn005 = new SimpleNode(JJTBEGIN);
        boolean jjtc005 = true;
        jjtree.openNodeScope(jjtn005);
            try {
              jj_consume_token(BEGIN);
            } finally {
        if (jjtc005) {
          jjtree.closeNodeScope(jjtn005, true);
        }
            }
            break;
          default:
            jj_la1[29] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
      argCounter++;
          break;
        default:
          jj_la1[30] = jj_gen;
          ;
        }
      } finally {
    if (jjtc006) {
      jjtree.closeNodeScope(jjtn006,  argCounter);
    }
      }
      jj_consume_token(74);
      label_11:
      while (true) {
    SimpleNode jjtn007 = new SimpleNode(JJTBODY);
    boolean jjtc007 = true;
    jjtree.openNodeScope(jjtn007);
        try {
          TargetCode();
        } catch (Throwable jjte007) {
    if (jjtc007) {
      jjtree.clearNodeScope(jjtn007);
      jjtc007 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte007 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte007;}
    }
    if (jjte007 instanceof ParseException) {
      {if (true) throw (ParseException)jjte007;}
    }
    {if (true) throw (Error)jjte007;}
        } finally {
    if (jjtc007) {
      jjtree.closeNodeScope(jjtn007, true);
    }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FPRINTF:
        case PRINT:
        case WARNING:
        case TARGETCODE:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[31] = jj_gen;
          break label_11;
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Set() throws ParseException {
  Token t;
    jj_consume_token(SET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      SimpleNode jjtn003 = new SimpleNode(JJTSET);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
      try {
        t = jj_consume_token(IDENTIFIER);
        SimpleNode jjtn001 = new SimpleNode(JJTLHS);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
        jjtree.closeNodeScope(jjtn001, true);
        jjtc001 = false;
        jjtn001.val = t.image;
        } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
        }
        }
        jj_consume_token(80);
                 SimpleNode jjtn002 = new SimpleNode(JJTRHS);
                 boolean jjtc002 = true;
                 jjtree.openNodeScope(jjtn002);
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 87:
            jj_consume_token(87);
            Identifier();
            label_12:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case 85:
                ;
                break;
              default:
                jj_la1[32] = jj_gen;
                break label_12;
              }
              jj_consume_token(85);
              Identifier();
            }
            jj_consume_token(88);
            break;
          case FIXED:
          case DOUBLE:
          case SINGLE:
          case INT8:
          case INT16:
          case INT32:
          case UINT8:
          case UINT16:
          case UINT32:
          case CHAR:
          case BOOL:
            Types();
            break;
          case IDENTIFIER:
            t = jj_consume_token(IDENTIFIER);
        jjtree.closeNodeScope(jjtn002, true);
        jjtc002 = false;
        jjtn002.val = t.image;
            break;
          default:
            jj_la1[33] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte002) {
                 if (jjtc002) {
                   jjtree.clearNodeScope(jjtn002);
                   jjtc002 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte002 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte002;}
                 }
                 if (jjte002 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte002;}
                 }
                 {if (true) throw (Error)jjte002;}
        } finally {
                 if (jjtc002) {
                   jjtree.closeNodeScope(jjtn002, true);
                 }
        }
      } catch (Throwable jjte003) {
      if (jjtc003) {
        jjtree.clearNodeScope(jjtn003);
        jjtc003 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte003 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte003;}
      }
      if (jjte003 instanceof ParseException) {
        {if (true) throw (ParseException)jjte003;}
      }
      {if (true) throw (Error)jjte003;}
      } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
      }
      }
      break;
    case FIXED:
    SimpleNode jjtn006 = new SimpleNode(JJTSETFIXED);
    boolean jjtc006 = true;
    jjtree.openNodeScope(jjtn006);
      try {
        jj_consume_token(FIXED);
        jj_consume_token(80);
        jj_consume_token(87);
        FixedPointProperties();
        jj_consume_token(80);
                                                  SimpleNode jjtn004 = new SimpleNode(JJTSET);
                                                  boolean jjtc004 = true;
                                                  jjtree.openNodeScope(jjtn004);
        try {
          ValuesFixedPointProperties();
        } catch (Throwable jjte004) {
                                                  if (jjtc004) {
                                                    jjtree.clearNodeScope(jjtn004);
                                                    jjtc004 = false;
                                                  } else {
                                                    jjtree.popNode();
                                                  }
                                                  if (jjte004 instanceof RuntimeException) {
                                                    {if (true) throw (RuntimeException)jjte004;}
                                                  }
                                                  if (jjte004 instanceof ParseException) {
                                                    {if (true) throw (ParseException)jjte004;}
                                                  }
                                                  {if (true) throw (Error)jjte004;}
        } finally {
                                                  if (jjtc004) {
                                                    jjtree.closeNodeScope(jjtn004,  2);
                                                  }
        }
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 85:
            ;
            break;
          default:
            jj_la1[34] = jj_gen;
            break label_13;
          }
          jj_consume_token(85);
          FixedPointProperties();
          jj_consume_token(80);
                                                                                                                       SimpleNode jjtn005 = new SimpleNode(JJTSET);
                                                                                                                       boolean jjtc005 = true;
                                                                                                                       jjtree.openNodeScope(jjtn005);
          try {
            ValuesFixedPointProperties();
          } catch (Throwable jjte005) {
                                                                                                                       if (jjtc005) {
                                                                                                                         jjtree.clearNodeScope(jjtn005);
                                                                                                                         jjtc005 = false;
                                                                                                                       } else {
                                                                                                                         jjtree.popNode();
                                                                                                                       }
                                                                                                                       if (jjte005 instanceof RuntimeException) {
                                                                                                                         {if (true) throw (RuntimeException)jjte005;}
                                                                                                                       }
                                                                                                                       if (jjte005 instanceof ParseException) {
                                                                                                                         {if (true) throw (ParseException)jjte005;}
                                                                                                                       }
                                                                                                                       {if (true) throw (Error)jjte005;}
          } finally {
                                                                                                                       if (jjtc005) {
                                                                                                                         jjtree.closeNodeScope(jjtn005,  2);
                                                                                                                       }
          }
        }
        jj_consume_token(88);
      } catch (Throwable jjte006) {
    if (jjtc006) {
      jjtree.clearNodeScope(jjtn006);
      jjtc006 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte006 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte006;}
    }
    if (jjte006 instanceof ParseException) {
      {if (true) throw (ParseException)jjte006;}
    }
    {if (true) throw (Error)jjte006;}
      } finally {
    if (jjtc006) {
      jjtree.closeNodeScope(jjtn006, true);
    }
      }
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(75);
  }

  static final public void WithStatement() throws ParseException {
 /*@bgen(jjtree) WithStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTWITHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(WITH);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION:
      case MODULE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FUNCTION:
          jj_consume_token(FUNCTION);
          jj_consume_token(80);
          t = jj_consume_token(IDENTIFIER);
            SimpleNode jjtn001 = new SimpleNode(JJTFUNCTION);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          try {
            jjtree.closeNodeScope(jjtn001, true);
            jjtc001 = false;
            jjtn001.val = t.image;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
          }
          break;
        case MODULE:
          jj_consume_token(MODULE);
          jj_consume_token(80);
          t = jj_consume_token(IDENTIFIER);
            SimpleNode jjtn002 = new SimpleNode(JJTMODULE);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          try {
            jjtree.closeNodeScope(jjtn002, true);
            jjtc002 = false;
            jjtn002.val = t.image;
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
          }
          break;
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DO:
          jj_consume_token(DO);
            SimpleNode jjtn003 = new SimpleNode(JJTDO);
            boolean jjtc003 = true;
            jjtree.openNodeScope(jjtn003);
          try {
            label_14:
            while (true) {
              Statement();
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case DEPENDENT:
                jj_consume_token(DEPENDENT);
                jj_consume_token(74);
                label_15:
                while (true) {
                  DependentStmt();
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case FOREACH:
                    ;
                    break;
                  default:
                    jj_la1[37] = jj_gen;
                    break label_15;
                  }
                }
                jj_consume_token(END);
                break;
              default:
                jj_la1[38] = jj_gen;
                ;
              }
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case FOREACH:
              case SET:
              case WITH:
              case INSERT:
                ;
                break;
              default:
                jj_la1[39] = jj_gen;
                break label_14;
              }
            }
          } catch (Throwable jjte003) {
            if (jjtc003) {
              jjtree.clearNodeScope(jjtn003);
              jjtc003 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte003 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte003;}
            }
            if (jjte003 instanceof ParseException) {
              {if (true) throw (ParseException)jjte003;}
            }
            {if (true) throw (Error)jjte003;}
          } finally {
            if (jjtc003) {
              jjtree.closeNodeScope(jjtn003, true);
            }
          }
          jj_consume_token(END);
          break;
        case USE:
        case 85:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 85:
            jj_consume_token(85);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case CALL:
              jj_consume_token(CALL);
              jj_consume_token(80);
              t = jj_consume_token(IDENTIFIER);
                SimpleNode jjtn004 = new SimpleNode(JJTCALL);
                boolean jjtc004 = true;
                jjtree.openNodeScope(jjtn004);
              try {
                jjtree.closeNodeScope(jjtn004, true);
                jjtc004 = false;
                jjtn004.val = t.image;
              } finally {
                if (jjtc004) {
                  jjtree.closeNodeScope(jjtn004, true);
                }
              }
              break;
            case OPERATION:
                SimpleNode jjtn005 = new SimpleNode(JJTOPERATION);
                boolean jjtc005 = true;
                jjtree.openNodeScope(jjtn005);
              try {
                jj_consume_token(OPERATION);
                jj_consume_token(80);
                OpsForConfigRules();
              } catch (Throwable jjte005) {
                if (jjtc005) {
                  jjtree.clearNodeScope(jjtn005);
                  jjtc005 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte005 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte005;}
                }
                if (jjte005 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte005;}
                }
                {if (true) throw (Error)jjte005;}
              } finally {
                if (jjtc005) {
                  jjtree.closeNodeScope(jjtn005, true);
                }
              }
              break;
            default:
              jj_la1[40] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[41] = jj_gen;
            ;
          }
          SimpleNode jjtn007 = new SimpleNode(JJTUSE);
          boolean jjtc007 = true;
          jjtree.openNodeScope(jjtn007);
          try {
            jj_consume_token(USE);
            label_16:
            while (true) {
              jj_consume_token(CONFIGURATION);
              t = jj_consume_token(IDENTIFIER);
            SimpleNode jjtn006 = new SimpleNode(JJTCONFIG);
            boolean jjtc006 = true;
            jjtree.openNodeScope(jjtn006);
              try {
            jjtree.closeNodeScope(jjtn006, true);
            jjtc006 = false;
            jjtn006.val = t.image;
              } finally {
            if (jjtc006) {
              jjtree.closeNodeScope(jjtn006, true);
            }
              }
              jj_consume_token(75);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case CONFIGURATION:
                ;
                break;
              default:
                jj_la1[42] = jj_gen;
                break label_16;
              }
            }
            jj_consume_token(END);
          } finally {
          if (jjtc007) {
            jjtree.closeNodeScope(jjtn007, true);
          }
          }
          break;
        default:
          jj_la1[43] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case STMT:
        jj_consume_token(STMT);
        jj_consume_token(80);
        t = jj_consume_token(STRING);
      SimpleNode jjtn008 = new SimpleNode(JJTSTATEMENT);
      boolean jjtc008 = true;
      jjtree.openNodeScope(jjtn008);
        try {
      jjtree.closeNodeScope(jjtn008, true);
      jjtc008 = false;
      jjtn008.val = t.image;
        } finally {
      if (jjtc008) {
        jjtree.closeNodeScope(jjtn008, true);
      }
        }
        jj_consume_token(DO);
                        SimpleNode jjtn009 = new SimpleNode(JJTDO);
                        boolean jjtc009 = true;
                        jjtree.openNodeScope(jjtn009);
        try {
          Decompose();
        } catch (Throwable jjte009) {
                        if (jjtc009) {
                          jjtree.clearNodeScope(jjtn009);
                          jjtc009 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte009 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte009;}
                        }
                        if (jjte009 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte009;}
                        }
                        {if (true) throw (Error)jjte009;}
        } finally {
                        if (jjtc009) {
                          jjtree.closeNodeScope(jjtn009, true);
                        }
        }
        jj_consume_token(END);
        break;
      case VAR:
        jj_consume_token(VAR);
        jj_consume_token(80);
                SimpleNode jjtn010 = new SimpleNode(JJTVAR);
                boolean jjtc010 = true;
                jjtree.openNodeScope(jjtn010);
        try {
          SetOfJPs();
        } catch (Throwable jjte010) {
                if (jjtc010) {
                  jjtree.clearNodeScope(jjtn010);
                  jjtc010 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte010 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte010;}
                }
                if (jjte010 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte010;}
                }
                {if (true) throw (Error)jjte010;}
        } finally {
                if (jjtc010) {
                  jjtree.closeNodeScope(jjtn010, true);
                }
        }
        jj_consume_token(DO);
                                       SimpleNode jjtn011 = new SimpleNode(JJTDO);
                                       boolean jjtc011 = true;
                                       jjtree.openNodeScope(jjtn011);
        try {
          label_17:
          while (true) {
            Statement();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case FOREACH:
            case SET:
            case WITH:
            case INSERT:
              ;
              break;
            default:
              jj_la1[44] = jj_gen;
              break label_17;
            }
          }
        } catch (Throwable jjte011) {
                                       if (jjtc011) {
                                         jjtree.clearNodeScope(jjtn011);
                                         jjtc011 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte011 instanceof RuntimeException) {
                                         {if (true) throw (RuntimeException)jjte011;}
                                       }
                                       if (jjte011 instanceof ParseException) {
                                         {if (true) throw (ParseException)jjte011;}
                                       }
                                       {if (true) throw (Error)jjte011;}
        } finally {
                                       if (jjtc011) {
                                         jjtree.closeNodeScope(jjtn011, true);
                                       }
        }
        jj_consume_token(END);
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void TargetCode() throws ParseException {
  Token t, s = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TARGETCODE:
    SimpleNode jjtn001 = new SimpleNode(JJTTARGETCODE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(TARGETCODE);
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
      break;
    case FPRINTF:
      jj_consume_token(FPRINTF);
      jj_consume_token(82);
      Arg();
  int argCounter = 1;
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 85:
          ;
          break;
        default:
          jj_la1[46] = jj_gen;
          break label_18;
        }
        jj_consume_token(85);
        Arg();
    argCounter++;
      }
      jj_consume_token(83);
      SimpleNode jjtn002 = new SimpleNode(JJTFPRINTF);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(75);
      } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  argCounter);
      }
      }
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 76:
    SimpleNode jjtn006 = new SimpleNode(JJTASSIGNMENT);
    boolean jjtc006 = true;
    jjtree.openNodeScope(jjtn006);
        try {
          Param();
      jjtn006.val = t.image;
          jj_consume_token(80);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            jj_consume_token(IDENTIFIER);
            Param();
          jjtn006.val = t.image;
            s = Op();
            t = jj_consume_token(NUMBER);
          SimpleNode jjtn003 = new SimpleNode(JJTNUMBER);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
            try {
          jjtree.closeNodeScope(jjtn003, true);
          jjtc003 = false;
          jjtn003.val = t.image;
            } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
          }
            }
        SimpleNode jjtn004 = new SimpleNode(JJTOP);
        boolean jjtc004 = true;
        jjtree.openNodeScope(jjtn004);
            try {
        jjtree.closeNodeScope(jjtn004,  2);
        jjtc004 = false;
        jjtn004.val = s.image;
            } finally {
        if (jjtc004) {
          jjtree.closeNodeScope(jjtn004,  2);
        }
            }
            jj_consume_token(75);
            break;
          case NUMBER:
            t = jj_consume_token(NUMBER);
      SimpleNode jjtn005 = new SimpleNode(JJTNUMBER);
      boolean jjtc005 = true;
      jjtree.openNodeScope(jjtn005);
            try {
      jjtree.closeNodeScope(jjtn005, true);
      jjtc005 = false;
      jjtn005.val = t.image;
            } finally {
      if (jjtc005) {
        jjtree.closeNodeScope(jjtn005, true);
      }
            }
            jj_consume_token(75);
            break;
          default:
            jj_la1[47] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte006) {
    if (jjtc006) {
      jjtree.clearNodeScope(jjtn006);
      jjtc006 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte006 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte006;}
    }
    if (jjte006 instanceof ParseException) {
      {if (true) throw (ParseException)jjte006;}
    }
    {if (true) throw (Error)jjte006;}
        } finally {
    if (jjtc006) {
      jjtree.closeNodeScope(jjtn006,  2);
    }
        }
        break;
      case 82:
  argCounter = 0;
        jj_consume_token(82);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
        case QUOTED:
        case NUMBER:
        case 76:
        case 90:
      argCounter++;
          Arg();
          label_19:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 85:
              ;
              break;
            default:
              jj_la1[48] = jj_gen;
              break label_19;
            }
            jj_consume_token(85);
            Arg();
        argCounter++;
          }
          break;
        default:
          jj_la1[49] = jj_gen;
          ;
        }
        jj_consume_token(83);
        jj_consume_token(75);
  SimpleNode jjtn007 = new SimpleNode(JJTMETHOD);
  boolean jjtc007 = true;
  jjtree.openNodeScope(jjtn007);
        try {
  jjtree.closeNodeScope(jjtn007,  argCounter);
  jjtc007 = false;
  jjtn007.val = t.image;
        } finally {
  if (jjtc007) {
    jjtree.closeNodeScope(jjtn007,  argCounter);
  }
        }
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case PRINT:
      jj_consume_token(PRINT);
      jj_consume_token(82);
  argCounter = 2;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SCREEN:
    SimpleNode jjtn008 = new SimpleNode(JJTSCREEN);
    boolean jjtc008 = true;
    jjtree.openNodeScope(jjtn008);
        try {
          jj_consume_token(SCREEN);
        } finally {
    if (jjtc008) {
      jjtree.closeNodeScope(jjtn008, true);
    }
        }
        break;
      case FILE:
    SimpleNode jjtn013 = new SimpleNode(JJTFILE);
    boolean jjtc013 = true;
    jjtree.openNodeScope(jjtn013);
        try {
          jj_consume_token(FILE);
          jj_consume_token(74);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
                   SimpleNode jjtn011 = new SimpleNode(JJTFILEID);
                   boolean jjtc011 = true;
                   jjtree.openNodeScope(jjtn011);
            try {
              t = jj_consume_token(IDENTIFIER);
    SimpleNode jjtn009 = new SimpleNode(JJTLHS);
    boolean jjtc009 = true;
    jjtree.openNodeScope(jjtn009);
              try {
    jjtree.closeNodeScope(jjtn009, true);
    jjtc009 = false;
    jjtn009.val = t.image;
              } finally {
    if (jjtc009) {
      jjtree.closeNodeScope(jjtn009, true);
    }
              }
              jj_consume_token(89);
              t = jj_consume_token(IDENTIFIER);
    SimpleNode jjtn010 = new SimpleNode(JJTRHS);
    boolean jjtc010 = true;
    jjtree.openNodeScope(jjtn010);
              try {
    jjtree.closeNodeScope(jjtn010, true);
    jjtc010 = false;
    jjtn010.val = t.image;
              } finally {
    if (jjtc010) {
      jjtree.closeNodeScope(jjtn010, true);
    }
              }
            } finally {
                   if (jjtc011) {
                     jjtree.closeNodeScope(jjtn011,  2);
                   }
            }
            break;
          case QUOTED:
            t = jj_consume_token(QUOTED);
    SimpleNode jjtn012 = new SimpleNode(JJTQUOTED);
    boolean jjtc012 = true;
    jjtree.openNodeScope(jjtn012);
            try {
    jjtree.closeNodeScope(jjtn012, true);
    jjtc012 = false;
    jjtn012.val = t.image;
            } finally {
    if (jjtc012) {
      jjtree.closeNodeScope(jjtn012, true);
    }
            }
            break;
          default:
            jj_la1[51] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } finally {
    if (jjtc013) {
      jjtree.closeNodeScope(jjtn013,  1);
    }
        }
        break;
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(85);
      Arg();
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 85:
          ;
          break;
        default:
          jj_la1[53] = jj_gen;
          break label_20;
        }
        jj_consume_token(85);
        Arg();
    argCounter++;
      }
      jj_consume_token(83);
      SimpleNode jjtn014 = new SimpleNode(JJTPRINT);
      boolean jjtc014 = true;
      jjtree.openNodeScope(jjtn014);
      try {
        jj_consume_token(75);
      } finally {
      if (jjtc014) {
        jjtree.closeNodeScope(jjtn014,  argCounter);
      }
      }
      break;
    case WARNING:
      jj_consume_token(WARNING);
      jj_consume_token(82);
      t = jj_consume_token(QUOTED);
      jj_consume_token(83);
      jj_consume_token(75);
  SimpleNode jjtn015 = new SimpleNode(JJTWARNING);
  boolean jjtc015 = true;
  jjtree.openNodeScope(jjtn015);
      try {
  jjtree.closeNodeScope(jjtn015, true);
  jjtc015 = false;
  jjtn015.val = t.image;
      } finally {
  if (jjtc015) {
    jjtree.closeNodeScope(jjtn015, true);
  }
      }
      break;
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Arg() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      t = jj_consume_token(NUMBER);
    SimpleNode jjtn001 = new SimpleNode(JJTARG);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
    jjtn001.val = t.image;
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
      break;
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
                   SimpleNode jjtn002 = new SimpleNode(JJTARG);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 76:
          Param();
          break;
        default:
          jj_la1[55] = jj_gen;
          ;
        }
      } catch (Throwable jjte002) {
                   if (jjtc002) {
                     jjtree.clearNodeScope(jjtn002);
                     jjtc002 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte002 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte002;}
                   }
                   if (jjte002 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte002;}
                   }
                   {if (true) throw (Error)jjte002;}
      } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002, true);
                   }
      }
      break;
    case QUOTED:
      t = jj_consume_token(QUOTED);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 76:
        Param();
        jj_consume_token(74);
        jj_consume_token(QUOTED);
        break;
      default:
        jj_la1[56] = jj_gen;
        ;
      }
  SimpleNode jjtn003 = new SimpleNode(JJTARG);
  boolean jjtc003 = true;
  jjtree.openNodeScope(jjtn003);
      try {
  jjtree.closeNodeScope(jjtn003, true);
  jjtc003 = false;
  jjtn003.val = t.image;
      } finally {
  if (jjtc003) {
    jjtree.closeNodeScope(jjtn003, true);
  }
      }
      break;
    case 76:
      Param();
  int counter = 1;
  SimpleNode jjtn005 = new SimpleNode(JJTARG);
  boolean jjtc005 = true;
  jjtree.openNodeScope(jjtn005);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 74:
          jj_consume_token(74);
          t = jj_consume_token(QUOTED);
  SimpleNode jjtn004 = new SimpleNode(JJTCOLONS);
  boolean jjtc004 = true;
  jjtree.openNodeScope(jjtn004);
          try {
  jjtree.closeNodeScope(jjtn004, true);
  jjtc004 = false;
  jjtn004.val = t.image;
  counter = 2;
          } finally {
  if (jjtc004) {
    jjtree.closeNodeScope(jjtn004, true);
  }
          }
          break;
        default:
          jj_la1[57] = jj_gen;
          ;
        }
      } finally {
  if (jjtc005) {
    jjtree.closeNodeScope(jjtn005,  counter);
  }
      }
      break;
    case 90:
      jj_consume_token(90);
      Param();
  counter = 1;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 74:
        jj_consume_token(74);
        t = jj_consume_token(QUOTED);
  SimpleNode jjtn006 = new SimpleNode(JJTCOLONS);
  boolean jjtc006 = true;
  jjtree.openNodeScope(jjtn006);
        try {
  jjtree.closeNodeScope(jjtn006, true);
  jjtc006 = false;
  jjtn006.val = t.image;
  counter = 2;
        } finally {
  if (jjtc006) {
    jjtree.closeNodeScope(jjtn006, true);
  }
        }
        break;
      default:
        jj_la1[58] = jj_gen;
        ;
      }
            SimpleNode jjtn007 = new SimpleNode(JJTARG);
            boolean jjtc007 = true;
            jjtree.openNodeScope(jjtn007);
      try {
        jj_consume_token(90);
      } finally {
            if (jjtc007) {
              jjtree.closeNodeScope(jjtn007,  counter);
            }
      }
      break;
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Param() throws ParseException {
 /*@bgen(jjtree) Param */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t1, t2 = null;
    try {
      jj_consume_token(76);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KEY:
      SimpleNode jjtn001 = new SimpleNode(JJTKEY);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(KEY);
        } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
        }
        break;
      case IDENTIFIER:
        t1 = jj_consume_token(IDENTIFIER);
      SimpleNode jjtn002 = new SimpleNode(JJTIDENTIFIER);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
        try {
      jjtree.closeNodeScope(jjtn002, true);
      jjtc002 = false;
      jjtn002.val = t1.image;
        } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
        }
        break;
      case VAR:
      SimpleNode jjtn003 = new SimpleNode(JJTVAR);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
        try {
          jj_consume_token(VAR);
        } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
      }
        }
        break;
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 89:
        jj_consume_token(89);
        t2 = jj_consume_token(IDENTIFIER);
    SimpleNode jjtn004 = new SimpleNode(JJTRHS);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
        try {
    jjtree.closeNodeScope(jjtn004, true);
    jjtc004 = false;
    jjtn004.val = t2.image;
        } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
    }
        }
        break;
      default:
        jj_la1[61] = jj_gen;
        ;
      }
      jj_consume_token(77);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public Token Op() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 91:
      t = jj_consume_token(91);
    {if (true) return t;}
      break;
    case 92:
      t = jj_consume_token(92);
    {if (true) return t;}
      break;
    default:
      jj_la1[62] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Types() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT8:
    SimpleNode jjtn001 = new SimpleNode(JJTINT8);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(INT8);
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
      break;
    case INT16:
    SimpleNode jjtn002 = new SimpleNode(JJTINT16);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(INT16);
      } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
      }
      break;
    case INT32:
    SimpleNode jjtn003 = new SimpleNode(JJTINT32);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(INT32);
      } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
      }
      break;
    case UINT8:
    SimpleNode jjtn004 = new SimpleNode(JJTUINT8);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
      try {
        jj_consume_token(UINT8);
      } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
    }
      }
      break;
    case UINT16:
    SimpleNode jjtn005 = new SimpleNode(JJTUINT16);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
      try {
        jj_consume_token(UINT16);
      } finally {
    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005, true);
    }
      }
      break;
    case UINT32:
    SimpleNode jjtn006 = new SimpleNode(JJTUINT32);
    boolean jjtc006 = true;
    jjtree.openNodeScope(jjtn006);
      try {
        jj_consume_token(UINT32);
      } finally {
    if (jjtc006) {
      jjtree.closeNodeScope(jjtn006, true);
    }
      }
      break;
    case CHAR:
    SimpleNode jjtn007 = new SimpleNode(JJTCHAR);
    boolean jjtc007 = true;
    jjtree.openNodeScope(jjtn007);
      try {
        jj_consume_token(CHAR);
      } finally {
    if (jjtc007) {
      jjtree.closeNodeScope(jjtn007, true);
    }
      }
      break;
    case BOOL:
    SimpleNode jjtn008 = new SimpleNode(JJTBOOL);
    boolean jjtc008 = true;
    jjtree.openNodeScope(jjtn008);
      try {
        jj_consume_token(BOOL);
      } finally {
    if (jjtc008) {
      jjtree.closeNodeScope(jjtn008, true);
    }
      }
      break;
    case DOUBLE:
    SimpleNode jjtn009 = new SimpleNode(JJTDOUBLE);
    boolean jjtc009 = true;
    jjtree.openNodeScope(jjtn009);
      try {
        jj_consume_token(DOUBLE);
      } finally {
    if (jjtc009) {
      jjtree.closeNodeScope(jjtn009, true);
    }
      }
      break;
    case SINGLE:
    SimpleNode jjtn010 = new SimpleNode(JJTSINGLE);
    boolean jjtc010 = true;
    jjtree.openNodeScope(jjtn010);
      try {
        jj_consume_token(SINGLE);
      } finally {
    if (jjtc010) {
      jjtree.closeNodeScope(jjtn010, true);
    }
      }
      break;
    case FIXED:
      Fixed();
      break;
    default:
      jj_la1[63] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void OpsForConvRules() throws ParseException {
  Token t;
    t = jj_consume_token(STRING);
    SimpleNode jjtn001 = new SimpleNode(JJTOPERATION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
    jjtn001.val = t.image;
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
  }

  static final public void TypesOnCOnvRules() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FIXED:
    case DOUBLE:
    case SINGLE:
    case INT8:
    case INT16:
    case INT32:
    case UINT8:
    case UINT16:
    case UINT32:
    case CHAR:
    case BOOL:
      Types();
      break;
    case FLOAT:
      SimpleNode jjtn001 = new SimpleNode(JJTFLOAT);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(FLOAT);
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
      break;
    case INT:
      SimpleNode jjtn002 = new SimpleNode(JJTINT);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(INT);
      } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
      }
      break;
    default:
      jj_la1[64] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void IfConvRule() throws ParseException {
 /*@bgen(jjtree) If */
  SimpleNode jjtn000 = new SimpleNode(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(IF);
      jj_consume_token(82);
      SimpleNode jjtn002 = new SimpleNode(JJTLEFTOP);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LHS:
        SimpleNode jjtn001 = new SimpleNode(JJTLHS);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
          try {
            jj_consume_token(LHS);
          } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
        }
          }
          break;
        case IDENTIFIER:
          CompleteIdentifier();
          break;
        default:
          jj_la1[65] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte002;}
      }
      if (jjte002 instanceof ParseException) {
        {if (true) throw (ParseException)jjte002;}
      }
      {if (true) throw (Error)jjte002;}
      } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
      }

      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 79:
        t = jj_consume_token(79);
        break;
      case 78:
        t = jj_consume_token(78);
        break;
      case 77:
        t = jj_consume_token(77);
        break;
      case 76:
        t = jj_consume_token(76);
        break;
      case 93:
        t = jj_consume_token(93);
        break;
      case 94:
        t = jj_consume_token(94);
        break;
      default:
        jj_la1[66] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
  SimpleNode jjtn003 = new SimpleNode(JJTRIGHTOP);
  boolean jjtc003 = true;
  jjtree.openNodeScope(jjtn003);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          CompleteIdentifier();
          break;
        case MAX:
        case MIN:
          BuiltInFunctions();
          jj_consume_token(82);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            CompleteIdentifier();
            label_21:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case 85:
                ;
                break;
              default:
                jj_la1[67] = jj_gen;
                break label_21;
              }
              jj_consume_token(85);
              CompleteIdentifier();
            }
            break;
          default:
            jj_la1[68] = jj_gen;
            ;
          }
          jj_consume_token(83);
          break;
        default:
          jj_la1[69] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte003) {
  if (jjtc003) {
    jjtree.clearNodeScope(jjtn003);
    jjtc003 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte003 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte003;}
  }
  if (jjte003 instanceof ParseException) {
    {if (true) throw (ParseException)jjte003;}
  }
  {if (true) throw (Error)jjte003;}
      } finally {
  if (jjtc003) {
    jjtree.closeNodeScope(jjtn003, true);
  }
      }
      jj_consume_token(83);
  SimpleNode jjtn004 = new SimpleNode(JJTCONDITION);
  boolean jjtc004 = true;
  jjtree.openNodeScope(jjtn004);
      try {
  jjtree.closeNodeScope(jjtn004,  2);
  jjtc004 = false;
  jjtn004.val = t.image;
      } finally {
  if (jjtc004) {
    jjtree.closeNodeScope(jjtn004,  2);
  }
      }
  SimpleNode jjtn005 = new SimpleNode(JJTBODY);
  boolean jjtc005 = true;
  jjtree.openNodeScope(jjtn005);
      try {
        label_22:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IR:
          case IDENTIFIER:
            SimpleStatement();
            break;
          case IF:
            IfConvRule();
            break;
          default:
            jj_la1[70] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IR:
          case IF:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[71] = jj_gen;
            break label_22;
          }
        }
      } catch (Throwable jjte005) {
  if (jjtc005) {
    jjtree.clearNodeScope(jjtn005);
    jjtc005 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte005 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte005;}
  }
  if (jjte005 instanceof ParseException) {
    {if (true) throw (ParseException)jjte005;}
  }
  {if (true) throw (Error)jjte005;}
      } finally {
  if (jjtc005) {
    jjtree.closeNodeScope(jjtn005, true);
  }
      }

      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
            SimpleNode jjtn006 = new SimpleNode(JJTELSE);
            boolean jjtc006 = true;
            jjtree.openNodeScope(jjtn006);
        try {
          label_23:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IR:
            case IDENTIFIER:
              SimpleStatement();
              break;
            case IF:
              IfConvRule();
              break;
            default:
              jj_la1[72] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IR:
            case IF:
            case IDENTIFIER:
              ;
              break;
            default:
              jj_la1[73] = jj_gen;
              break label_23;
            }
          }
        } catch (Throwable jjte006) {
            if (jjtc006) {
              jjtree.clearNodeScope(jjtn006);
              jjtc006 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte006 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte006;}
            }
            if (jjte006 instanceof ParseException) {
              {if (true) throw (ParseException)jjte006;}
            }
            {if (true) throw (Error)jjte006;}
        } finally {
            if (jjtc006) {
              jjtree.closeNodeScope(jjtn006, true);
            }
        }
        break;
      default:
        jj_la1[74] = jj_gen;
        ;
      }
      jj_consume_token(END);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void SimpleStatement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IR:
    SimpleNode jjtn002 = new SimpleNode(JJTIR);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(IR);
        jj_consume_token(80);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LHS:
        SimpleNode jjtn001 = new SimpleNode(JJTLHS);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
          try {
            jj_consume_token(LHS);
          } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
        }
          }
          break;
        case MAX:
        case MIN:
          BuiltInFunctions();
          jj_consume_token(82);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            CompleteIdentifier();
            label_24:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case 85:
                ;
                break;
              default:
                jj_la1[75] = jj_gen;
                break label_24;
              }
              jj_consume_token(85);
              CompleteIdentifier();
            }
            break;
          default:
            jj_la1[76] = jj_gen;
            ;
          }
          jj_consume_token(83);
          break;
        case IDENTIFIER:
          CompleteIdentifier();
          break;
        default:
          jj_la1[77] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(75);
      } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte002;}
    }
    if (jjte002 instanceof ParseException) {
      {if (true) throw (ParseException)jjte002;}
    }
    {if (true) throw (Error)jjte002;}
      } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
      }
      break;
    case IDENTIFIER:
    SimpleNode jjtn011 = new SimpleNode(JJTASSIGNMENT);
    boolean jjtc011 = true;
    jjtree.openNodeScope(jjtn011);
      try {
     SimpleNode jjtn003 = new SimpleNode(JJTLEFTOP);
     boolean jjtc003 = true;
     jjtree.openNodeScope(jjtn003);
        try {
          CompleteIdentifier();
        } catch (Throwable jjte003) {
     if (jjtc003) {
       jjtree.clearNodeScope(jjtn003);
       jjtc003 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte003 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte003;}
     }
     if (jjte003 instanceof ParseException) {
       {if (true) throw (ParseException)jjte003;}
     }
     {if (true) throw (Error)jjte003;}
        } finally {
     if (jjtc003) {
       jjtree.closeNodeScope(jjtn003, true);
     }
        }
        jj_consume_token(80);
                                      SimpleNode jjtn010 = new SimpleNode(JJTRIGHTOP);
                                      boolean jjtc010 = true;
                                      jjtree.openNodeScope(jjtn010);
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            CompleteIdentifier();
            break;
          case MAX:
          case MIN:
            BuiltInFunctions();
            jj_consume_token(82);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IDENTIFIER:
              CompleteIdentifier();
              label_25:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case 85:
                  ;
                  break;
                default:
                  jj_la1[78] = jj_gen;
                  break label_25;
                }
                jj_consume_token(85);
                CompleteIdentifier();
              }
              break;
            default:
              jj_la1[79] = jj_gen;
              ;
            }
            jj_consume_token(83);
            break;
          default:
            jj_la1[80] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OR:
          case AND:
          case XOR:
          case 91:
          case 92:
          case 95:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case OR:
                                                                                        SimpleNode jjtn004 = new SimpleNode(JJTOR);
                                                                                        boolean jjtc004 = true;
                                                                                        jjtree.openNodeScope(jjtn004);
              try {
                jj_consume_token(OR);
              } finally {
                                                                                        if (jjtc004) {
                                                                                          jjtree.closeNodeScope(jjtn004, true);
                                                                                        }
              }
              break;
            case AND:
    SimpleNode jjtn005 = new SimpleNode(JJTAND);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
              try {
                jj_consume_token(AND);
              } finally {
    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005, true);
    }
              }
              break;
            case XOR:
    SimpleNode jjtn006 = new SimpleNode(JJTXOR);
    boolean jjtc006 = true;
    jjtree.openNodeScope(jjtn006);
              try {
                jj_consume_token(XOR);
              } finally {
    if (jjtc006) {
      jjtree.closeNodeScope(jjtn006, true);
    }
              }
              break;
            case 95:
    SimpleNode jjtn007 = new SimpleNode(JJTMUL);
    boolean jjtc007 = true;
    jjtree.openNodeScope(jjtn007);
              try {
                jj_consume_token(95);
              } finally {
    if (jjtc007) {
      jjtree.closeNodeScope(jjtn007, true);
    }
              }
              break;
            case 91:
    SimpleNode jjtn008 = new SimpleNode(JJTSUM);
    boolean jjtc008 = true;
    jjtree.openNodeScope(jjtn008);
              try {
                jj_consume_token(91);
              } finally {
    if (jjtc008) {
      jjtree.closeNodeScope(jjtn008, true);
    }
              }
              break;
            case 92:
    SimpleNode jjtn009 = new SimpleNode(JJTSUB);
    boolean jjtc009 = true;
    jjtree.openNodeScope(jjtn009);
              try {
                jj_consume_token(92);
              } finally {
    if (jjtc009) {
      jjtree.closeNodeScope(jjtn009, true);
    }
              }
              break;
            default:
              jj_la1[81] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IDENTIFIER:
              CompleteIdentifier();
              break;
            case MAX:
            case MIN:
              BuiltInFunctions();
              jj_consume_token(82);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case IDENTIFIER:
                CompleteIdentifier();
                label_26:
                while (true) {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case 85:
                    ;
                    break;
                  default:
                    jj_la1[82] = jj_gen;
                    break label_26;
                  }
                  jj_consume_token(85);
                  CompleteIdentifier();
                }
                break;
              default:
                jj_la1[83] = jj_gen;
                ;
              }
              jj_consume_token(83);
              break;
            default:
              jj_la1[84] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[85] = jj_gen;
            ;
          }
        } catch (Throwable jjte010) {
                                      if (jjtc010) {
                                        jjtree.clearNodeScope(jjtn010);
                                        jjtc010 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte010 instanceof RuntimeException) {
                                        {if (true) throw (RuntimeException)jjte010;}
                                      }
                                      if (jjte010 instanceof ParseException) {
                                        {if (true) throw (ParseException)jjte010;}
                                      }
                                      {if (true) throw (Error)jjte010;}
        } finally {
                                      if (jjtc010) {
                                        jjtree.closeNodeScope(jjtn010, true);
                                      }
        }
        jj_consume_token(75);
      } catch (Throwable jjte011) {
    if (jjtc011) {
      jjtree.clearNodeScope(jjtn011);
      jjtc011 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte011 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte011;}
    }
    if (jjte011 instanceof ParseException) {
      {if (true) throw (ParseException)jjte011;}
    }
    {if (true) throw (Error)jjte011;}
      } finally {
    if (jjtc011) {
      jjtree.closeNodeScope(jjtn011, true);
    }
      }
      break;
    default:
      jj_la1[86] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void FixedPointProperties() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OVERFLOW:
    SimpleNode jjtn001 = new SimpleNode(JJTOVERFLOW);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(OVERFLOW);
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
      break;
    case ROUND:
    SimpleNode jjtn002 = new SimpleNode(JJTROUND);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(ROUND);
      } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
      }
      break;
    default:
      jj_la1[87] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ValuesFixedPointProperties() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WRAP:
    SimpleNode jjtn001 = new SimpleNode(JJTWRAP);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(WRAP);
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
      break;
    case FLOOR:
    SimpleNode jjtn002 = new SimpleNode(JJTFLOOR);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(FLOOR);
      } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
      }
      break;
    default:
      jj_la1[88] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void SetOfJPs() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
    SimpleNode jjtn001 = new SimpleNode(JJTELEM);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
    jjtn001.val = t.image;
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
      break;
    case 87:
      jj_consume_token(87);
      Identifier();
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 85:
          ;
          break;
        default:
          jj_la1[89] = jj_gen;
          break label_27;
        }
        jj_consume_token(85);
        Identifier();
      }
      jj_consume_token(88);
      break;
    default:
      jj_la1[90] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Identifier() throws ParseException {
  Token t;
    t = jj_consume_token(IDENTIFIER);
    SimpleNode jjtn001 = new SimpleNode(JJTELEM);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
    jjtn001.val = t.image;
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
  }

  static final public void JPList() throws ParseException {
    JP();
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 85:
        ;
        break;
      default:
        jj_la1[91] = jj_gen;
        break label_28;
      }
      jj_consume_token(85);
      JP();
    }
  }

  static final public void JP() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case 96:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 96:
        jj_consume_token(96);
        break;
      default:
        jj_la1[92] = jj_gen;
        ;
      }
      t = jj_consume_token(IDENTIFIER);
        SimpleNode jjtn001 = new SimpleNode(JJTELEM);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      try {
        jjtree.closeNodeScope(jjtn001, true);
        jjtc001 = false;
        jjtn001.val = t.image;
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
        }
      }
      break;
    case END:
      SimpleNode jjtn002 = new SimpleNode(JJTEND);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(END);
      } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
      }
      break;
    case IF:
      SimpleNode jjtn003 = new SimpleNode(JJTIF);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(IF);
      } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
      }
      }
      break;
    case ELSE:
      SimpleNode jjtn004 = new SimpleNode(JJTELSE);
      boolean jjtc004 = true;
      jjtree.openNodeScope(jjtn004);
      try {
        jj_consume_token(ELSE);
      } finally {
      if (jjtc004) {
        jjtree.closeNodeScope(jjtn004, true);
      }
      }
      break;
    default:
      jj_la1[93] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void DependentStmt() throws ParseException {
 /*@bgen(jjtree) DependentStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTDEPENDENTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(FOREACH);
    int argCounter = 1;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KEY:
      SimpleNode jjtn001 = new SimpleNode(JJTKEY);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(KEY);
        } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
        }
        break;
      case TAG:
      SimpleNode jjtn002 = new SimpleNode(JJTTAG);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(TAG);
        } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
        }
        break;
      case VAR:
      SimpleNode jjtn003 = new SimpleNode(JJTVAR);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
        try {
          jj_consume_token(VAR);
        } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
      }
        }
        break;
      default:
        jj_la1[94] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    SimpleNode jjtn005 = new SimpleNode(JJTITER);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          t = jj_consume_token(IDENTIFIER);
    SimpleNode jjtn004 = new SimpleNode(JJTELEM);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
          try {
    jjtree.closeNodeScope(jjtn004, true);
    jjtc004 = false;
    jjtn004.val = t.image;
    argCounter++;
          } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
    }
          }
          break;
        default:
          jj_la1[95] = jj_gen;
          ;
        }
      } finally {
    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005,  argCounter);
    }
      }
      jj_consume_token(IN);
  SimpleNode jjtn010 = new SimpleNode(JJTITERLIST);
  boolean jjtc010 = true;
  jjtree.openNodeScope(jjtn010);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FUNCTION:
        case PROGRAM:
        case IDENTIFIER:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            jj_consume_token(IDENTIFIER);
            break;
          case FUNCTION:
          case PROGRAM:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case PROGRAM:
          SimpleNode jjtn006 = new SimpleNode(JJTPROGRAM);
          boolean jjtc006 = true;
          jjtree.openNodeScope(jjtn006);
              try {
                jj_consume_token(PROGRAM);
              } finally {
          if (jjtc006) {
            jjtree.closeNodeScope(jjtn006, true);
          }
              }
              break;
            case FUNCTION:
          SimpleNode jjtn007 = new SimpleNode(JJTFUNCTION);
          boolean jjtc007 = true;
          jjtree.openNodeScope(jjtn007);
              try {
                jj_consume_token(FUNCTION);
              } finally {
          if (jjtc007) {
            jjtree.closeNodeScope(jjtn007, true);
          }
              }
              break;
            default:
              jj_la1[96] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 74:
              jj_consume_token(74);
              t = jj_consume_token(IDENTIFIER);
        SimpleNode jjtn008 = new SimpleNode(JJTCOLONS);
        boolean jjtc008 = true;
        jjtree.openNodeScope(jjtn008);
              try {
        jjtree.closeNodeScope(jjtn008, true);
        jjtc008 = false;
        jjtn008.val = t.image;
              } finally {
        if (jjtc008) {
          jjtree.closeNodeScope(jjtn008, true);
        }
              }
              break;
            default:
              jj_la1[97] = jj_gen;
              ;
            }
            break;
          default:
            jj_la1[98] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        case 87:
          jj_consume_token(87);
        SimpleNode jjtn009 = new SimpleNode(JJTLIST);
        boolean jjtc009 = true;
        jjtree.openNodeScope(jjtn009);
          try {
            JPList();
          } catch (Throwable jjte009) {
        if (jjtc009) {
          jjtree.clearNodeScope(jjtn009);
          jjtc009 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte009 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte009;}
        }
        if (jjte009 instanceof ParseException) {
          {if (true) throw (ParseException)jjte009;}
        }
        {if (true) throw (Error)jjte009;}
          } finally {
        if (jjtc009) {
          jjtree.closeNodeScope(jjtn009, true);
        }
          }
          jj_consume_token(88);
          break;
        default:
          jj_la1[99] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte010) {
  if (jjtc010) {
    jjtree.clearNodeScope(jjtn010);
    jjtc010 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte010 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte010;}
  }
  if (jjte010 instanceof ParseException) {
    {if (true) throw (ParseException)jjte010;}
  }
  {if (true) throw (Error)jjte010;}
      } finally {
  if (jjtc010) {
    jjtree.closeNodeScope(jjtn010, true);
  }
      }
      jj_consume_token(DO);
      label_29:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INSERT:
          Insert();
          break;
        case SET:
          Set();
          break;
        default:
          jj_la1[100] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SET:
        case INSERT:
          ;
          break;
        default:
          jj_la1[101] = jj_gen;
          break label_29;
        }
      }
      jj_consume_token(END);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void OpsForConfigRules() throws ParseException {
  Token t;
    t = jj_consume_token(STRING);
    SimpleNode jjtn001 = new SimpleNode(JJTOPSCONFIGRULES);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
    jjtn001.val = t.image;
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
  }

  static final public void Decompose() throws ParseException {
 /*@bgen(jjtree) Decompose */
  SimpleNode jjtn000 = new SimpleNode(JJTDECOMPOSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(DECOMPOSE);
      t = jj_consume_token(TARGETCODE);
    SimpleNode jjtn001 = new SimpleNode(JJTTARGETCODE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
    jjtn001.val = t.image;
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
      jj_consume_token(75);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Fixed() throws ParseException {
 /*@bgen(jjtree) Fixed */
  SimpleNode jjtn000 = new SimpleNode(JJTFIXED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FIXED);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 76:
        jj_consume_token(76);
        Number();
        jj_consume_token(85);
        Number();
        jj_consume_token(85);
        Number();
        jj_consume_token(77);
        break;
      default:
        jj_la1[102] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Number() throws ParseException {
 /*@bgen(jjtree) Number */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NUMBER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.val = t.image;
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void CompleteIdentifier() throws ParseException {
 /*@bgen(jjtree) Ident */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
    SimpleNode jjtn001 = new SimpleNode(JJTLEFT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
    jjtn001.val = t.image;
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }

      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 89:
        jj_consume_token(89);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          t = jj_consume_token(IDENTIFIER);
    SimpleNode jjtn002 = new SimpleNode(JJTRIGHT);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
          try {
    jjtree.closeNodeScope(jjtn002, true);
    jjtc002 = false;
    jjtn002.val = t.image;
          } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
          }
          break;
        case MAX:
        case MIN:
    SimpleNode jjtn003 = new SimpleNode(JJTRIGHT);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
          try {
            BuiltInFunctions();
          } catch (Throwable jjte003) {
    if (jjtc003) {
      jjtree.clearNodeScope(jjtn003);
      jjtc003 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte003 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte003;}
    }
    if (jjte003 instanceof ParseException) {
      {if (true) throw (ParseException)jjte003;}
    }
    {if (true) throw (Error)jjte003;}
          } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
          }
          break;
        default:
          jj_la1[103] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }

        break;
      default:
        jj_la1[104] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void BuiltInFunctions() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAX:
    SimpleNode jjtn001 = new SimpleNode(JJTMAX);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(MAX);
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
      break;
    case MIN:
    SimpleNode jjtn002 = new SimpleNode(JJTMIN);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(MIN);
      } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
      }
      break;
    default:
      jj_la1[105] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public DSL_LARATokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[106];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x80,0x0,0x900100,0x900100,0xa0000000,0x900100,0x0,0x0,0x20000000,0x0,0x40000000,0x0,0x40000000,0x40000000,0xe0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x100,0x0,0x100000,0x0,0x18000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x900100,0x80000000,0x0,0x0,0x2000,0x900100,0x84000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x600000,0x40000000,0x40000000,0x40000000,0x40000000,0x0,0x0,0x0,0x600000,0x0,0x0,0x600000,0xe00,0x0,0x0,0x600000,0xe00,0x40000000,0x18000000,0x6000000,0x0,0x0,0x0,0x0,0x8000,0xe0000,0x0,0x0,0x0,0x0,0x0,0x100000,0x100000,0x0,0x600000,0x0,0x600000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1000,0x0,0x0,0x1,0x400060,0x400060,0x0,0x40,0x0,0x1c000,0x0,0x4,0x0,0x0,0x20,0x20,0x0,0x0,0x280000,0x0,0x0,0x280000,0x280000,0x0,0x40,0x0,0x2000,0x40,0x980,0x0,0x0,0x1c000,0x0,0xff800000,0x0,0x800000,0x180000,0x0,0x2000,0x40,0x8,0x0,0x10,0x1,0x40,0x180000,0x0,0x0,0x0,0x0,0x0,0x0,0x60000,0x0,0x1c000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xff800000,0xff800600,0x4,0x0,0x0,0x0,0x0,0x20,0x20,0x20,0x20,0x2,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x22,0x0,0x0,0x280000,0x0,0x280000,0x280000,0x40,0x40,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0xf000,0x18,0x0,0x10,0x10,0x200000,0x10,0x10,0x0,0x10,0x0,0x10000,0x400,0x10,0x10,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x18,0x200000,0x800013,0x200000,0x10,0x0,0x0,0x0,0x0,0x0,0x200000,0x0,0x200000,0x0,0x0,0x200000,0x110,0x200000,0x4001190,0x41000,0x90,0x0,0x200000,0x18,0x1000,0x1000,0x400,0x400,0x4001190,0x10,0x2000000,0x18000000,0x3,0x3,0x10,0x6000f000,0x200000,0x10,0x10,0x10,0x10,0x10,0x10,0x0,0x200000,0x10,0x10,0x200000,0x10,0x10,0x98000000,0x200000,0x10,0x10,0x98000000,0x10,0x0,0x0,0x200000,0x800010,0x200000,0x0,0x10,0x0,0x10,0x0,0x400,0x10,0x800010,0x0,0x0,0x1000,0x10,0x2000000,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public DSL_LARA(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public DSL_LARA(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DSL_LARATokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 106; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 106; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public DSL_LARA(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DSL_LARATokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 106; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 106; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public DSL_LARA(DSL_LARATokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 106; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(DSL_LARATokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 106; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[97];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 106; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 97; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
