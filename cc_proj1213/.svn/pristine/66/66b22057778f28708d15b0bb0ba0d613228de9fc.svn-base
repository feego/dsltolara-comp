/* Generated By:JJTree&JavaCC: Do not edit this line. DSL_LARAConstants.java */
package pack;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface DSL_LARAConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int RULE = 7;
  /** RegularExpression Id. */
  int FOREACH = 8;
  /** RegularExpression Id. */
  int OR = 9;
  /** RegularExpression Id. */
  int AND = 10;
  /** RegularExpression Id. */
  int XOR = 11;
  /** RegularExpression Id. */
  int EACH = 12;
  /** RegularExpression Id. */
  int DO = 13;
  /** RegularExpression Id. */
  int STMT = 14;
  /** RegularExpression Id. */
  int END = 15;
  /** RegularExpression Id. */
  int BEGIN = 16;
  /** RegularExpression Id. */
  int KEY = 17;
  /** RegularExpression Id. */
  int TAG = 18;
  /** RegularExpression Id. */
  int VAR = 19;
  /** RegularExpression Id. */
  int SET = 20;
  /** RegularExpression Id. */
  int MAX = 21;
  /** RegularExpression Id. */
  int MIN = 22;
  /** RegularExpression Id. */
  int WITH = 23;
  /** RegularExpression Id. */
  int IN = 24;
  /** RegularExpression Id. */
  int WRAP = 25;
  /** RegularExpression Id. */
  int FLOOR = 26;
  /** RegularExpression Id. */
  int OVERFLOW = 27;
  /** RegularExpression Id. */
  int ROUND = 28;
  /** RegularExpression Id. */
  int COMMUTATIVE = 29;
  /** RegularExpression Id. */
  int IR = 30;
  /** RegularExpression Id. */
  int OPERATION = 31;
  /** RegularExpression Id. */
  int USE = 32;
  /** RegularExpression Id. */
  int ELSE = 33;
  /** RegularExpression Id. */
  int LHS = 34;
  /** RegularExpression Id. */
  int CALL = 35;
  /** RegularExpression Id. */
  int CONFIGURATION = 36;
  /** RegularExpression Id. */
  int IF = 37;
  /** RegularExpression Id. */
  int INSERT = 38;
  /** RegularExpression Id. */
  int BEFORE = 39;
  /** RegularExpression Id. */
  int AFTER = 40;
  /** RegularExpression Id. */
  int FLOAT = 41;
  /** RegularExpression Id. */
  int INT = 42;
  /** RegularExpression Id. */
  int AROUND = 43;
  /** RegularExpression Id. */
  int APPLY = 44;
  /** RegularExpression Id. */
  int DEPENDENT = 45;
  /** RegularExpression Id. */
  int FPRINTF = 46;
  /** RegularExpression Id. */
  int PRINT = 47;
  /** RegularExpression Id. */
  int WARNING = 48;
  /** RegularExpression Id. */
  int SCREEN = 49;
  /** RegularExpression Id. */
  int FILE = 50;
  /** RegularExpression Id. */
  int FUNCTION = 51;
  /** RegularExpression Id. */
  int MODULE = 52;
  /** RegularExpression Id. */
  int PROGRAM = 53;
  /** RegularExpression Id. */
  int TYPEDEF = 54;
  /** RegularExpression Id. */
  int FIXED = 55;
  /** RegularExpression Id. */
  int DOUBLE = 56;
  /** RegularExpression Id. */
  int SINGLE = 57;
  /** RegularExpression Id. */
  int INT8 = 58;
  /** RegularExpression Id. */
  int INT16 = 59;
  /** RegularExpression Id. */
  int INT32 = 60;
  /** RegularExpression Id. */
  int UINT8 = 61;
  /** RegularExpression Id. */
  int UINT16 = 62;
  /** RegularExpression Id. */
  int UINT32 = 63;
  /** RegularExpression Id. */
  int CHAR = 64;
  /** RegularExpression Id. */
  int BOOL = 65;
  /** RegularExpression Id. */
  int DECOMPOSE = 66;
  /** RegularExpression Id. */
  int TARGETCODE = 67;
  /** RegularExpression Id. */
  int IDENTIFIER = 68;
  /** RegularExpression Id. */
  int DIGIT = 69;
  /** RegularExpression Id. */
  int LETTER = 70;
  /** RegularExpression Id. */
  int QUOTED = 71;
  /** RegularExpression Id. */
  int NUMBER = 72;
  /** RegularExpression Id. */
  int STRING = 73;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "\"rule\"",
    "\"foreach\"",
    "\"or\"",
    "\"and\"",
    "\"xor\"",
    "\"each\"",
    "\"do\"",
    "\"statement\"",
    "\"end\"",
    "\"begin\"",
    "\"key\"",
    "\"tag\"",
    "\"var\"",
    "\"set\"",
    "\"max\"",
    "\"min\"",
    "\"with\"",
    "\"in\"",
    "\"wrap\"",
    "\"floor\"",
    "\"overflow\"",
    "\"round\"",
    "\"commutative\"",
    "\"ir\"",
    "\"operation\"",
    "\"use\"",
    "\"else\"",
    "\"lhs\"",
    "\"call\"",
    "\"configuration\"",
    "\"if\"",
    "\"insert\"",
    "\"before\"",
    "\"after\"",
    "\"float\"",
    "\"int\"",
    "\"around\"",
    "\"apply\"",
    "\"dependent\"",
    "\"fprintf\"",
    "\"print\"",
    "\"warning\"",
    "\"screen\"",
    "\"file\"",
    "\"function\"",
    "\"module\"",
    "\"program\"",
    "\"typedef\"",
    "\"fixed\"",
    "\"double\"",
    "\"single\"",
    "\"int8\"",
    "\"int16\"",
    "\"int32\"",
    "\"uint8\"",
    "\"uint16\"",
    "\"uint32\"",
    "\"char\"",
    "\"bool\"",
    "\"decompose\"",
    "<TARGETCODE>",
    "<IDENTIFIER>",
    "<DIGIT>",
    "<LETTER>",
    "<QUOTED>",
    "<NUMBER>",
    "<STRING>",
    "\":\"",
    "\";\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"=\"",
    "\"::=\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\",\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\".\"",
    "\"\\\'\"",
    "\"+\"",
    "\"-\"",
    "\"==\"",
    "\"!=\"",
    "\"*\"",
    "\"@\"",
  };

}
