/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Calculator.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  static = true;}PARSER_BEGIN(Calculator)package pack;public class Calculator/*@bgen(jjtree)*/implements CalculatorTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTCalculatorState jjtree = new JJTCalculatorState();

/*@egen*/  public static void main(String args []) throws ParseException  {    Calculator myCalc = new Calculator(System.in);    SimpleNode root = myCalc.Start();    root.dump("");    System.out.println("Valor da express\u00e3o: " + myCalc.eval(root));  }  int eval(SimpleNode node)  {    if (node.jjtGetNumChildren() == 0)  // leaf node with integer value
    return node.val;    else if (node.jjtGetNumChildren() == 1)  // only one child
    return this.eval((SimpleNode) node.jjtGetChild(0));    SimpleNode lhs = (SimpleNode) node.jjtGetChild(0); //left child
    SimpleNode rhs = (SimpleNode) node.jjtGetChild(1); // right child
    switch (node.id)    {      case CalculatorTreeConstants.JJTADD : return eval(lhs) + eval(rhs);      case CalculatorTreeConstants.JJTSUB : return eval(lhs) - eval(rhs);      case CalculatorTreeConstants.JJTMUL : return eval(lhs) * eval(rhs);      case CalculatorTreeConstants.JJTDIV : return eval(lhs) / eval(rhs);      default : // abort
      System.out.println("Operador ilegal!");      System.exit(1);    }    return 0;  }}PARSER_END(Calculator)SKIP :{  " "| "\t"| "\n"| "\r"| <    (      "//"    | "#"    | "%" (~[ "{" ]) //FODI ISTO TUDO    )    (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}< DEFAULT >TOKEN [ IGNORE_CASE ] :{  < RULE : "rule" >| < FOREACH : "foreach" >| < OR : "or" >| < AND : "and" >| < XOR : "xor" >| < EACH : "each" >| < DO : "do" >| < STMT : "statement" >| < END : "end" >| < BEGIN : "begin" >| < KEY : "key" >| < TAG : "tag" >| < VAR : "var" >| < SET : "set" >| < MAX : "max" >| < MIN : "min" >| < WITH : "with" >| < IN : "in" >| < WRAP : "wrap" >| < FLOOR : "floor" >| < OVERFLOW : "overflow" >| < ROUND : "round" >| < COMMUTATIVE : "commutative" >| < IR : "ir" >| < OPERATION : "operation" >| < USE : "use" >| < ELSE : "else" >| < LHS : "lhs" >| < CALL : "call" >| < CONFIGURATION : "configuration" >| < IF : "if" >| < INSERT : "insert" >| < BEFORE : "before" >| < AFTER : "after" >| < FLOAT : "float" >| < INT : "int" >| < AROUND : "around" >| < APPLY : "apply" >| < DEPENDENT : "dependent" >| < FPRINTF : "fprintf" >| < PRINT : "print" >| < WARNING : "warning" >| < SCREEN : "screen" >| < FILE : "file" >| < FUNCTION : "function" >| < MODULE : "module" >| < PROGRAM : "program" >| < TYPEDEF : "typedef" >| < FIXED : "fixed" >| < DOUBLE : "double" >| < SINGLE : "single" >| < INT8 : "int8" >| < INT16 : "int16" >| < INT32 : "int32" >| < UINT8 : "uint8" >| < UINT16 : "uint16" >| < UINT32 : "uint32" >| < CHAR : "char" >| < BOOL : "bool" >| < DECOMPOSE : "decompose" >| < TARGETCODE :    "%{"    (      ~[ "}" ]    | "}" ~[ "%" ]    )*    "}%" >}< DEFAULT >TOKEN :{  < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < #DIGIT : [ "0"-"9" ] >| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >| < QUOTED :    "\'"    (      ~[ "\'" ]    | "\\\'"    )+    "\'" >| < NUMBER : (< DIGIT >)+ >| < STRING :    "\""    (      ~[ "\"" ]    | "\\\""    )+    "\"" >}SimpleNode Start() :{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Start */
  try {
/*@egen*/  (    < APPLY > < IDENTIFIER > (":" < IDENTIFIER >)* ";"  )*  (    Rule()  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Rule() :{/*@bgen(jjtree) Rule */
 SimpleNode jjtn000 = new SimpleNode(JJTRULE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) Rule */
  try {
/*@egen*/  < RULE >
  t = < IDENTIFIER >  (    Use()  )*  (    Statement()  | InjectCode()  | TypeDef()  )*  (    DataTypeConvRules()  )*  < END >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Use() :{/*@bgen(jjtree) Use */
  SimpleNode jjtn000 = new SimpleNode(JJTUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Use */
  try {
/*@egen*/  < USE > < IDENTIFIER > ";"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Statement()      :{}{  ForEachStatement()| Insert()| Set()| WithStatement()}void InjectCode() :{/*@bgen(jjtree) InjectCode */
  SimpleNode jjtn000 = new SimpleNode(JJTINJECTCODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) InjectCode */
  try {
/*@egen*/  < IF > < IDENTIFIER > ":" < IDENTIFIER >  (    "<"  | ">"  | "<="  | ">="  )  < NUMBER >  (    TargetCode()  )+  < END >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void TypeDef() :{/*@bgen(jjtree) TypeDef */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPEDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) TypeDef */
  try {
/*@egen*/  < TYPEDEF > < IDENTIFIER > "=" Types() ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void DataTypeConvRules() :{/*@bgen(jjtree) DataTypeConvRules */
  SimpleNode jjtn000 = new SimpleNode(JJTDATATYPECONVRULES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) DataTypeConvRules */
  try {
/*@egen*/  (< COMMUTATIVE >)? < OPERATION > OpsForConvRules() TypesOnCOnvRules()  (    < LHS >  | < IDENTIFIER >  )  "::=" "(" TypesOnCOnvRules()  (    < IR >  | < IDENTIFIER >  )  ")" "[" TypesOnCOnvRules() < IDENTIFIER >  (    "," TypesOnCOnvRules() < IDENTIFIER >  )?  "]" ":"  (    IfConvRule()  | SimpleStatement()  )+  < END >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ForEachStatement() :{/*@bgen(jjtree) ForEachStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTFOREACHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ForEachStatement */
  try {
/*@egen*/  (    < FOREACH >    (      < KEY >    | < TAG >    | < VAR >    )    (< IDENTIFIER >)? < IN >    (      (        < IDENTIFIER >      |        (          (            < PROGRAM >          | < FUNCTION >          )          (            "=" SetOfJPs()          )?        )        (          ":" SetOfJPs()        )?      )?      (        "{" JPList() "}"      )?    )    < DO >    (      (        Insert()      | Set()      )      (        < DEPENDENT > ":"        (          DependentStmt()        )+        < END >      )?    )+    < END >   )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Insert() :{/*@bgen(jjtree) Insert */
  SimpleNode jjtn000 = new SimpleNode(JJTINSERT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Insert */
  try {
/*@egen*/  < INSERT > "."  (    < BEFORE >  | < AFTER >  | < AROUND >  )  (    "."    (      < END >    | < BEGIN >    )  )?  ":"  (    TargetCode()  )+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Set() :{/*@bgen(jjtree) Set */
  SimpleNode jjtn000 = new SimpleNode(JJTSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Set */
  try {
/*@egen*/  < SET >  (    (      < IDENTIFIER > "="      (        (          "{" < IDENTIFIER > ("," < IDENTIFIER >)* "}"        )      | Types()      | < IDENTIFIER >      )    )  |    (      < FIXED > "=" "{" FixedPointProperties() "=" ValuesFixedPointProperties()      (        "," FixedPointProperties() "=" ValuesFixedPointProperties()      )*      "}"    )  )  ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void WithStatement() :{/*@bgen(jjtree) WithStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTWITHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) WithStatement */
  try {
/*@egen*/  < WITH >  (    (      (        (          < FUNCTION >        | < MODULE >        )        "=" < IDENTIFIER >      )      (        (          < DO >          (            Statement()            (              < DEPENDENT > ":"              (                DependentStmt()              )+              < END >            )?          )+          < END >        )      |        (          (            ","            (              (< CALL > "=" < IDENTIFIER >)            |              (                < OPERATION > "=" OpsForConfigRules()              )            )          )?          (            < USE > (< CONFIGURATION > < IDENTIFIER > ";")+ < END >          )        )      )    )  |    (      < STMT > "=" < STRING > < DO > Decompose() < END >    )  |    (      < VAR > "=" SetOfJPs() < DO >      (        Statement()      )+      < END >    )  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void TargetCode() :{/*@bgen(jjtree) TargetCode */
  SimpleNode jjtn000 = new SimpleNode(JJTTARGETCODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) TargetCode */
  try {
/*@egen*/  < TARGETCODE >|/*@bgen(jjtree) FPRINTF */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTFPRINTF);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/ < FPRINTF >/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/         
"(" Arg()  (    "," Arg()   )*  ")" ";" | < IDENTIFIER >  (    (      Param() "="      (        (          < IDENTIFIER > Param() Op() < NUMBER >        )        ";"      | (< NUMBER >) ";"      )    )  |    (      "("      (        Arg()        (          "," Arg()        )*      )?      ")" ";"    )  )| < PRINT > "("  (    < SCREEN >  |    (      < FILE > ":"      (        (< IDENTIFIER > "." < IDENTIFIER >)      | (< QUOTED >)      )    )  )  "," Arg()  (    "," Arg()  )*  ")" ";"| < WARNING > "(" < QUOTED > ")" ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Arg()      :{Token t;}{  t = < NUMBER >/*@bgen(jjtree) Value */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTVALUE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
  }
/*@egen*/  {    jjtn001.val = Integer.parseInt(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/       | < IDENTIFIER >/*@bgen(jjtree) Value2 */
  {
    SimpleNode jjtn002 = new SimpleNode(JJTVALUE2);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/  (    Param()  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      throw (RuntimeException)jjte002;
    }
    if (jjte002 instanceof ParseException) {
      throw (ParseException)jjte002;
    }
    throw (Error)jjte002;
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/        | < QUOTED >  (    Param() ":" < QUOTED >  )?| Param()/*@bgen(jjtree) Value3 */
          {
            SimpleNode jjtn003 = new SimpleNode(JJTVALUE3);
            boolean jjtc003 = true;
            jjtree.openNodeScope(jjtn003);
          }
          try {
/*@egen*/ (":" < QUOTED >)?/*@bgen(jjtree)*/
          } finally {
            if (jjtc003) {
              jjtree.closeNodeScope(jjtn003, true);
            }
          }
/*@egen*/        | "\'" Param() (":" < QUOTED >)?/*@bgen(jjtree) Value4 */
                                 {
                                   SimpleNode jjtn004 = new SimpleNode(JJTVALUE4);
                                   boolean jjtc004 = true;
                                   jjtree.openNodeScope(jjtn004);
                                 }
                                 try {
/*@egen*/ "\'"/*@bgen(jjtree)*/
                                 } finally {
                                   if (jjtc004) {
                                     jjtree.closeNodeScope(jjtn004, true);
                                   }
                                 }
/*@egen*/        }void Param() :{/*@bgen(jjtree) Param */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Param */
  try {
/*@egen*/  "<"  (    < KEY >  | < IDENTIFIER >  | < VAR >  )  ("." < IDENTIFIER >)? ">"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Op() :{/*@bgen(jjtree) Op */
  SimpleNode jjtn000 = new SimpleNode(JJTOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Op */
  try {
/*@egen*/  "+"| "-"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Types() :{/*@bgen(jjtree) Types */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Types */
  try {
/*@egen*/  < INT8 >| < INT16 >| < INT32 >| < UINT8 >| < UINT16 >| < UINT32 >| < CHAR >| < BOOL >| < DOUBLE >| < SINGLE >| Fixed()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void OpsForConvRules() :{/*@bgen(jjtree) OpsForConvRules */
  SimpleNode jjtn000 = new SimpleNode(JJTOPSFORCONVRULES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) OpsForConvRules */
  try {
/*@egen*/  < STRING >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void TypesOnCOnvRules() :{/*@bgen(jjtree) TypesOnCOnvRules */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPESONCONVRULES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) TypesOnCOnvRules */
  try {
/*@egen*/  (    Types()  | < FLOAT >  | < INT >  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void IfConvRule() :{/*@bgen(jjtree) IfConvRule */
  SimpleNode jjtn000 = new SimpleNode(JJTIFCONVRULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) IfConvRule */
  try {
/*@egen*/  < IF > "("  (    < LHS >  | CompleteIdentifier()  )  (    ">="  | "<="  | ">"  | "<"  | "=="  | "!="  )  (    CompleteIdentifier()  | BuiltInFunctions() "("    (      CompleteIdentifier()      (        "," CompleteIdentifier()      )*    )?    ")"  )  ")"  (    SimpleStatement()  | IfConvRule()  )+  (    < ELSE >    (      SimpleStatement()    | IfConvRule()    )+  )?  < END >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SimpleStatement() :{/*@bgen(jjtree) SimpleStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSIMPLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SimpleStatement */
  try {
/*@egen*/  (    < IR > "="    (      < LHS >    | BuiltInFunctions() "("      (        CompleteIdentifier()        (          "," CompleteIdentifier()        )*      )?      ")"    | CompleteIdentifier()    )    ";"  )|  (    CompleteIdentifier() "="    (      CompleteIdentifier()    | BuiltInFunctions() "("      (        CompleteIdentifier()        (          "," CompleteIdentifier()        )*      )?      ")"    )    (      (        < OR >      | < AND >      | < XOR >      | "*"      | "+"      | "-"      )      (        CompleteIdentifier()      | BuiltInFunctions() "("        (          CompleteIdentifier()          (            "," CompleteIdentifier()          )*        )?        ")"      )    )?    ";"  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void FixedPointProperties() :{/*@bgen(jjtree) FixedPointProperties */
  SimpleNode jjtn000 = new SimpleNode(JJTFIXEDPOINTPROPERTIES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FixedPointProperties */
  try {
/*@egen*/  < OVERFLOW >| < ROUND >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ValuesFixedPointProperties() :{/*@bgen(jjtree) ValuesFixedPointProperties */
  SimpleNode jjtn000 = new SimpleNode(JJTVALUESFIXEDPOINTPROPERTIES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ValuesFixedPointProperties */
  try {
/*@egen*/  < WRAP >| < FLOOR >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SetOfJPs() :{/*@bgen(jjtree) SetOfJPs */
  SimpleNode jjtn000 = new SimpleNode(JJTSETOFJPS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SetOfJPs */
  try {
/*@egen*/  < IDENTIFIER >|  (    "{"    (      < IDENTIFIER > ("," < IDENTIFIER >)*    )    "}"  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void JPList()       :{}{  (    (      ("@")? < IDENTIFIER >    )  | < END >  | < IF >  | < ELSE >  )  (    ","    (      (        ("@")? < IDENTIFIER >       )    | < END >    | < IF >    | < ELSE >    )  )*}void DependentStmt() :{/*@bgen(jjtree) DependentStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTDEPENDENTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) DependentStmt */
  try {
/*@egen*/  < FOREACH >  (    < KEY >  | < TAG >  | < VAR >  )  (< IDENTIFIER >)? < IN >  (    (      < IDENTIFIER >    |      (        (          < PROGRAM >        | < FUNCTION >        )        (":" < IDENTIFIER >)?      )    )  | "{" JPList() "}"  )  < DO >  (    (      Insert()    | Set()    )+  )  < END >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void OpsForConfigRules() :{/*@bgen(jjtree) OpsForConfigRules */
  SimpleNode jjtn000 = new SimpleNode(JJTOPSFORCONFIGRULES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) OpsForConfigRules */
  try {
/*@egen*/  < STRING >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Decompose() :{/*@bgen(jjtree) Decompose */
  SimpleNode jjtn000 = new SimpleNode(JJTDECOMPOSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Decompose */
  try {
/*@egen*/  < DECOMPOSE > < TARGETCODE > ";"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Fixed() :{/*@bgen(jjtree) Fixed */
  SimpleNode jjtn000 = new SimpleNode(JJTFIXED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Fixed */
  try {
/*@egen*/  < FIXED > ("<" < NUMBER > "," < NUMBER > "," < NUMBER > ">")?/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void CompleteIdentifier() :{/*@bgen(jjtree) CompleteIdentifier */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPLETEIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) CompleteIdentifier */
  try {
/*@egen*/  < IDENTIFIER >  (    "."    (      < IDENTIFIER >    | BuiltInFunctions()    )  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void BuiltInFunctions() :{/*@bgen(jjtree) BuiltInFunctions */
  SimpleNode jjtn000 = new SimpleNode(JJTBUILTINFUNCTIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) BuiltInFunctions */
  try {
/*@egen*/  < MAX >| < MIN >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}SimpleNode Expression() :{/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Expression */
  try {
/*@egen*/  Expr1()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Expr1()       :{}{  Expr2(1)  [    (      "+"/*@bgen(jjtree) #Add( 2) */
          {
            SimpleNode jjtn001 = new SimpleNode(JJTADD);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/ Expr2(1)/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
            }
          }
/*@egen*/          | "-"/*@bgen(jjtree) #Sub( 2) */
        {
          SimpleNode jjtn002 = new SimpleNode(JJTSUB);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/ Expr2(1)/*@bgen(jjtree)*/
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            throw (RuntimeException)jjte002;
          }
          if (jjte002 instanceof ParseException) {
            throw (ParseException)jjte002;
          }
          throw (Error)jjte002;
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
          }
        }
/*@egen*/        )]}void Expr2(int sign)       :{}{  Expr3(sign)  (    "*"/*@bgen(jjtree) #Mul( 2) */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTMUL);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/ Expr3(1)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
/*@egen*/        | "/"/*@bgen(jjtree) #Div( 2) */
      {
        SimpleNode jjtn002 = new SimpleNode(JJTDIV);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*/ Expr3(1)/*@bgen(jjtree)*/
      } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          throw (RuntimeException)jjte002;
        }
        if (jjte002 instanceof ParseException) {
          throw (ParseException)jjte002;
        }
        throw (Error)jjte002;
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  2);
        }
      }
/*@egen*/        )?}void Expr3(int sign)       :{  Token t;}{  t = < NUMBER >/*@bgen(jjtree) Term */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTTERM);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
  }
/*@egen*/  {    jjtn001.val = sign * Integer.parseInt(t.image);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/       | "-" Expr3(- 1)| "(" Expr1() ")"}
