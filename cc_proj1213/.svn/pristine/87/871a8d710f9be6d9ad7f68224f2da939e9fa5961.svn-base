/* Generated By:JJTree&JavaCC: Do not edit this line. Calculator.java */
package pack;

public class Calculator/*@bgen(jjtree)*/implements CalculatorTreeConstants, CalculatorConstants {/*@bgen(jjtree)*/
  protected static JJTCalculatorState jjtree = new JJTCalculatorState();public static void main(String args []) throws ParseException
  {
    Calculator myCalc = new Calculator(System.in);
    SimpleNode root = myCalc.Start();
    root.dump("");
    System.out.println("Valor da express\u00e3o: " + myCalc.eval(root));
  }
  int eval(SimpleNode node)
  {
    if (node.jjtGetNumChildren() == 0)  // leaf node with integer value
    return node.val;
    else if (node.jjtGetNumChildren() == 1)  // only one child
    return this.eval((SimpleNode) node.jjtGetChild(0));
    SimpleNode lhs = (SimpleNode) node.jjtGetChild(0); //left child
    SimpleNode rhs = (SimpleNode) node.jjtGetChild(1); // right child
    switch (node.id)
    {
      case CalculatorTreeConstants.JJTADD : return eval(lhs) + eval(rhs);
      case CalculatorTreeConstants.JJTSUB : return eval(lhs) - eval(rhs);
      case CalculatorTreeConstants.JJTMUL : return eval(lhs) * eval(rhs);
      case CalculatorTreeConstants.JJTDIV : return eval(lhs) / eval(rhs);
      default : // abort
      System.out.println("Operador ilegal!");
      System.exit(1);
    }
    return 0;
  }

  static final public SimpleNode Start() throws ParseException {
 /*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case APPLY:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        jj_consume_token(APPLY);
        jj_consume_token(IDENTIFIER);
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 74:
            ;
            break;
          default:
            jj_la1[1] = jj_gen;
            break label_2;
          }
          jj_consume_token(74);
          jj_consume_token(IDENTIFIER);
        }
        jj_consume_token(75);
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RULE:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_3;
        }
        Rule();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Rule() throws ParseException {
 /*@bgen(jjtree) Rule */
  SimpleNode jjtn000 = new SimpleNode(JJTRULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RULE);
      jj_consume_token(IDENTIFIER);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case USE:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_4;
        }
        Use();
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FOREACH:
        case SET:
        case WITH:
        case IF:
        case INSERT:
        case TYPEDEF:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_5;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FOREACH:
        case SET:
        case WITH:
        case INSERT:
          Statement();
          break;
        case IF:
          InjectCode();
          break;
        case TYPEDEF:
          TypeDef();
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMUTATIVE:
        case OPERATION:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_6;
        }
        DataTypeConvRules();
      }
      jj_consume_token(END);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Use() throws ParseException {
 /*@bgen(jjtree) Use */
  SimpleNode jjtn000 = new SimpleNode(JJTUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(USE);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(75);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Statement() throws ParseException {
 /*@bgen(jjtree) Statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FOREACH:
        ForEachStatement();
        break;
      case INSERT:
        Insert();
        break;
      case SET:
        Set();
        break;
      case WITH:
        WithStatement();
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void InjectCode() throws ParseException {
 /*@bgen(jjtree) InjectCode */
  SimpleNode jjtn000 = new SimpleNode(JJTINJECTCODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(74);
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 76:
        jj_consume_token(76);
        break;
      case 77:
        jj_consume_token(77);
        break;
      case 78:
        jj_consume_token(78);
        break;
      case 79:
        jj_consume_token(79);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(NUMBER);
      label_7:
      while (true) {
        TargetCode();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FPRINTF:
        case PRINT:
        case WARNING:
        case TARGETCODE:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_7;
        }
      }
      jj_consume_token(END);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void TypeDef() throws ParseException {
 /*@bgen(jjtree) TypeDef */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPEDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TYPEDEF);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(80);
      Types();
      jj_consume_token(75);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void DataTypeConvRules() throws ParseException {
 /*@bgen(jjtree) DataTypeConvRules */
  SimpleNode jjtn000 = new SimpleNode(JJTDATATYPECONVRULES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMUTATIVE:
        jj_consume_token(COMMUTATIVE);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      jj_consume_token(OPERATION);
      OpsForConvRules();
      TypesOnCOnvRules();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LHS:
        jj_consume_token(LHS);
        break;
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(81);
      jj_consume_token(82);
      TypesOnCOnvRules();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IR:
        jj_consume_token(IR);
        break;
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(83);
      jj_consume_token(84);
      TypesOnCOnvRules();
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 85:
        jj_consume_token(85);
        TypesOnCOnvRules();
        jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      jj_consume_token(86);
      jj_consume_token(74);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
          IfConvRule();
          break;
        case IR:
        case IDENTIFIER:
          SimpleStatement();
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IR:
        case IF:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_8;
        }
      }
      jj_consume_token(END);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ForEachStatement() throws ParseException {
 /*@bgen(jjtree) ForEachStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTFOREACHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOREACH);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KEY:
        jj_consume_token(KEY);
        break;
      case TAG:
        jj_consume_token(TAG);
        break;
      case VAR:
        jj_consume_token(VAR);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      jj_consume_token(IN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION:
      case PROGRAM:
      case IDENTIFIER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          jj_consume_token(IDENTIFIER);
          break;
        case FUNCTION:
        case PROGRAM:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PROGRAM:
            jj_consume_token(PROGRAM);
            break;
          case FUNCTION:
            jj_consume_token(FUNCTION);
            break;
          default:
            jj_la1[18] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 80:
            jj_consume_token(80);
            SetOfJPs();
            break;
          default:
            jj_la1[19] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 74:
            jj_consume_token(74);
            SetOfJPs();
            break;
          default:
            jj_la1[20] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 87:
        jj_consume_token(87);
        JPList();
        jj_consume_token(88);
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      jj_consume_token(DO);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INSERT:
          Insert();
          break;
        case SET:
          Set();
          break;
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DEPENDENT:
          jj_consume_token(DEPENDENT);
          jj_consume_token(74);
          label_10:
          while (true) {
            DependentStmt();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case FOREACH:
              ;
              break;
            default:
              jj_la1[25] = jj_gen;
              break label_10;
            }
          }
          jj_consume_token(END);
          break;
        default:
          jj_la1[26] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SET:
        case INSERT:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_9;
        }
      }
      jj_consume_token(END);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Insert() throws ParseException {
 /*@bgen(jjtree) Insert */
  SimpleNode jjtn000 = new SimpleNode(JJTINSERT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INSERT);
      jj_consume_token(89);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BEFORE:
        jj_consume_token(BEFORE);
        break;
      case AFTER:
        jj_consume_token(AFTER);
        break;
      case AROUND:
        jj_consume_token(AROUND);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 89:
        jj_consume_token(89);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case END:
          jj_consume_token(END);
          break;
        case BEGIN:
          jj_consume_token(BEGIN);
          break;
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      jj_consume_token(74);
      label_11:
      while (true) {
        TargetCode();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FPRINTF:
        case PRINT:
        case WARNING:
        case TARGETCODE:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[31] = jj_gen;
          break label_11;
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Set() throws ParseException {
 /*@bgen(jjtree) Set */
  SimpleNode jjtn000 = new SimpleNode(JJTSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        jj_consume_token(80);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 87:
          jj_consume_token(87);
          jj_consume_token(IDENTIFIER);
          label_12:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 85:
              ;
              break;
            default:
              jj_la1[32] = jj_gen;
              break label_12;
            }
            jj_consume_token(85);
            jj_consume_token(IDENTIFIER);
          }
          jj_consume_token(88);
          break;
        case FIXED:
        case DOUBLE:
        case SINGLE:
        case INT8:
        case INT16:
        case INT32:
        case UINT8:
        case UINT16:
        case UINT32:
        case CHAR:
        case BOOL:
          Types();
          break;
        case IDENTIFIER:
          jj_consume_token(IDENTIFIER);
          break;
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case FIXED:
        jj_consume_token(FIXED);
        jj_consume_token(80);
        jj_consume_token(87);
        FixedPointProperties();
        jj_consume_token(80);
        ValuesFixedPointProperties();
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 85:
            ;
            break;
          default:
            jj_la1[34] = jj_gen;
            break label_13;
          }
          jj_consume_token(85);
          FixedPointProperties();
          jj_consume_token(80);
          ValuesFixedPointProperties();
        }
        jj_consume_token(88);
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(75);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void WithStatement() throws ParseException {
 /*@bgen(jjtree) WithStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTWITHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WITH);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION:
      case MODULE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FUNCTION:
          jj_consume_token(FUNCTION);
          break;
        case MODULE:
          jj_consume_token(MODULE);
          break;
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(80);
        jj_consume_token(IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DO:
          jj_consume_token(DO);
          label_14:
          while (true) {
            Statement();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case DEPENDENT:
              jj_consume_token(DEPENDENT);
              jj_consume_token(74);
              label_15:
              while (true) {
                DependentStmt();
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case FOREACH:
                  ;
                  break;
                default:
                  jj_la1[37] = jj_gen;
                  break label_15;
                }
              }
              jj_consume_token(END);
              break;
            default:
              jj_la1[38] = jj_gen;
              ;
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case FOREACH:
            case SET:
            case WITH:
            case INSERT:
              ;
              break;
            default:
              jj_la1[39] = jj_gen;
              break label_14;
            }
          }
          jj_consume_token(END);
          break;
        case USE:
        case 85:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 85:
            jj_consume_token(85);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case CALL:
              jj_consume_token(CALL);
              jj_consume_token(80);
              jj_consume_token(IDENTIFIER);
              break;
            case OPERATION:
              jj_consume_token(OPERATION);
              jj_consume_token(80);
              OpsForConfigRules();
              break;
            default:
              jj_la1[40] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[41] = jj_gen;
            ;
          }
          jj_consume_token(USE);
          label_16:
          while (true) {
            jj_consume_token(CONFIGURATION);
            jj_consume_token(IDENTIFIER);
            jj_consume_token(75);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case CONFIGURATION:
              ;
              break;
            default:
              jj_la1[42] = jj_gen;
              break label_16;
            }
          }
          jj_consume_token(END);
          break;
        default:
          jj_la1[43] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case STMT:
        jj_consume_token(STMT);
        jj_consume_token(80);
        jj_consume_token(STRING);
        jj_consume_token(DO);
        Decompose();
        jj_consume_token(END);
        break;
      case VAR:
        jj_consume_token(VAR);
        jj_consume_token(80);
        SetOfJPs();
        jj_consume_token(DO);
        label_17:
        while (true) {
          Statement();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FOREACH:
          case SET:
          case WITH:
          case INSERT:
            ;
            break;
          default:
            jj_la1[44] = jj_gen;
            break label_17;
          }
        }
        jj_consume_token(END);
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void TargetCode() throws ParseException {
 /*@bgen(jjtree) TargetCode */
  SimpleNode jjtn000 = new SimpleNode(JJTTARGETCODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TARGETCODE:
        jj_consume_token(TARGETCODE);
        break;
      case FPRINTF:
        jj_consume_token(FPRINTF);
        jj_consume_token(82);
        Arg();
        label_18:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 85:
            ;
            break;
          default:
            jj_la1[46] = jj_gen;
            break label_18;
          }
          jj_consume_token(85);
          Arg();
        }
        jj_consume_token(83);
        jj_consume_token(75);
        break;
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 76:
          Param();
          jj_consume_token(80);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            jj_consume_token(IDENTIFIER);
            Param();
            Op();
            jj_consume_token(NUMBER);
            jj_consume_token(75);
            break;
          case NUMBER:
            jj_consume_token(NUMBER);
            jj_consume_token(75);
            break;
          default:
            jj_la1[47] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        case 82:
          jj_consume_token(82);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
          case QUOTED:
          case NUMBER:
          case 76:
          case 90:
            Arg();
            label_19:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case 85:
                ;
                break;
              default:
                jj_la1[48] = jj_gen;
                break label_19;
              }
              jj_consume_token(85);
              Arg();
            }
            break;
          default:
            jj_la1[49] = jj_gen;
            ;
          }
          jj_consume_token(83);
          jj_consume_token(75);
          break;
        default:
          jj_la1[50] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case PRINT:
        jj_consume_token(PRINT);
        jj_consume_token(82);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SCREEN:
          jj_consume_token(SCREEN);
          break;
        case FILE:
          jj_consume_token(FILE);
          jj_consume_token(74);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            jj_consume_token(IDENTIFIER);
            jj_consume_token(89);
            jj_consume_token(IDENTIFIER);
            break;
          case QUOTED:
            jj_consume_token(QUOTED);
            break;
          default:
            jj_la1[51] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[52] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(85);
        Arg();
        label_20:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 85:
            ;
            break;
          default:
            jj_la1[53] = jj_gen;
            break label_20;
          }
          jj_consume_token(85);
          Arg();
        }
        jj_consume_token(83);
        jj_consume_token(75);
        break;
      case WARNING:
        jj_consume_token(WARNING);
        jj_consume_token(82);
        jj_consume_token(QUOTED);
        jj_consume_token(83);
        jj_consume_token(75);
        break;
      default:
        jj_la1[54] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Arg() throws ParseException {
 /*@bgen(jjtree) Arg */
  SimpleNode jjtn000 = new SimpleNode(JJTARG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
        jj_consume_token(NUMBER);
        break;
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 76:
          Param();
          break;
        default:
          jj_la1[55] = jj_gen;
          ;
        }
        break;
      case QUOTED:
        jj_consume_token(QUOTED);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 76:
          Param();
          jj_consume_token(74);
          jj_consume_token(QUOTED);
          break;
        default:
          jj_la1[56] = jj_gen;
          ;
        }
        break;
      case 76:
        Param();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 74:
          jj_consume_token(74);
          jj_consume_token(QUOTED);
          break;
        default:
          jj_la1[57] = jj_gen;
          ;
        }
        break;
      case 90:
        jj_consume_token(90);
        Param();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 74:
          jj_consume_token(74);
          jj_consume_token(QUOTED);
          break;
        default:
          jj_la1[58] = jj_gen;
          ;
        }
        jj_consume_token(90);
        break;
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Param() throws ParseException {
 /*@bgen(jjtree) Param */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(76);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KEY:
        jj_consume_token(KEY);
        break;
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      case VAR:
        jj_consume_token(VAR);
        break;
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 89:
        jj_consume_token(89);
        jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[61] = jj_gen;
        ;
      }
      jj_consume_token(77);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Op() throws ParseException {
 /*@bgen(jjtree) Op */
  SimpleNode jjtn000 = new SimpleNode(JJTOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 91:
        jj_consume_token(91);
        break;
      case 92:
        jj_consume_token(92);
        break;
      default:
        jj_la1[62] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Types() throws ParseException {
 /*@bgen(jjtree) Types */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT8:
        jj_consume_token(INT8);
        break;
      case INT16:
        jj_consume_token(INT16);
        break;
      case INT32:
        jj_consume_token(INT32);
        break;
      case UINT8:
        jj_consume_token(UINT8);
        break;
      case UINT16:
        jj_consume_token(UINT16);
        break;
      case UINT32:
        jj_consume_token(UINT32);
        break;
      case CHAR:
        jj_consume_token(CHAR);
        break;
      case BOOL:
        jj_consume_token(BOOL);
        break;
      case DOUBLE:
        jj_consume_token(DOUBLE);
        break;
      case SINGLE:
        jj_consume_token(SINGLE);
        break;
      case FIXED:
        Fixed();
        break;
      default:
        jj_la1[63] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void OpsForConvRules() throws ParseException {
 /*@bgen(jjtree) OpsForConvRules */
  SimpleNode jjtn000 = new SimpleNode(JJTOPSFORCONVRULES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STRING);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void TypesOnCOnvRules() throws ParseException {
 /*@bgen(jjtree) TypesOnCOnvRules */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPESONCONVRULES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FIXED:
      case DOUBLE:
      case SINGLE:
      case INT8:
      case INT16:
      case INT32:
      case UINT8:
      case UINT16:
      case UINT32:
      case CHAR:
      case BOOL:
        Types();
        break;
      case FLOAT:
        jj_consume_token(FLOAT);
        break;
      case INT:
        jj_consume_token(INT);
        break;
      default:
        jj_la1[64] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void IfConvRule() throws ParseException {
 /*@bgen(jjtree) IfConvRule */
  SimpleNode jjtn000 = new SimpleNode(JJTIFCONVRULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      jj_consume_token(82);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LHS:
        jj_consume_token(LHS);
        break;
      case IDENTIFIER:
        CompleteIdentifier();
        break;
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 79:
        jj_consume_token(79);
        break;
      case 78:
        jj_consume_token(78);
        break;
      case 77:
        jj_consume_token(77);
        break;
      case 76:
        jj_consume_token(76);
        break;
      case 93:
        jj_consume_token(93);
        break;
      case 94:
        jj_consume_token(94);
        break;
      default:
        jj_la1[66] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        CompleteIdentifier();
        break;
      case MAX:
      case MIN:
        BuiltInFunctions();
        jj_consume_token(82);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          CompleteIdentifier();
          label_21:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 85:
              ;
              break;
            default:
              jj_la1[67] = jj_gen;
              break label_21;
            }
            jj_consume_token(85);
            CompleteIdentifier();
          }
          break;
        default:
          jj_la1[68] = jj_gen;
          ;
        }
        jj_consume_token(83);
        break;
      default:
        jj_la1[69] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(83);
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IR:
        case IDENTIFIER:
          SimpleStatement();
          break;
        case IF:
          IfConvRule();
          break;
        default:
          jj_la1[70] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IR:
        case IF:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[71] = jj_gen;
          break label_22;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        label_23:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IR:
          case IDENTIFIER:
            SimpleStatement();
            break;
          case IF:
            IfConvRule();
            break;
          default:
            jj_la1[72] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IR:
          case IF:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[73] = jj_gen;
            break label_23;
          }
        }
        break;
      default:
        jj_la1[74] = jj_gen;
        ;
      }
      jj_consume_token(END);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void SimpleStatement() throws ParseException {
 /*@bgen(jjtree) SimpleStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSIMPLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IR:
        jj_consume_token(IR);
        jj_consume_token(80);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LHS:
          jj_consume_token(LHS);
          break;
        case MAX:
        case MIN:
          BuiltInFunctions();
          jj_consume_token(82);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            CompleteIdentifier();
            label_24:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case 85:
                ;
                break;
              default:
                jj_la1[75] = jj_gen;
                break label_24;
              }
              jj_consume_token(85);
              CompleteIdentifier();
            }
            break;
          default:
            jj_la1[76] = jj_gen;
            ;
          }
          jj_consume_token(83);
          break;
        case IDENTIFIER:
          CompleteIdentifier();
          break;
        default:
          jj_la1[77] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(75);
        break;
      case IDENTIFIER:
        CompleteIdentifier();
        jj_consume_token(80);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          CompleteIdentifier();
          break;
        case MAX:
        case MIN:
          BuiltInFunctions();
          jj_consume_token(82);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            CompleteIdentifier();
            label_25:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case 85:
                ;
                break;
              default:
                jj_la1[78] = jj_gen;
                break label_25;
              }
              jj_consume_token(85);
              CompleteIdentifier();
            }
            break;
          default:
            jj_la1[79] = jj_gen;
            ;
          }
          jj_consume_token(83);
          break;
        default:
          jj_la1[80] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
        case AND:
        case XOR:
        case 91:
        case 92:
        case 95:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OR:
            jj_consume_token(OR);
            break;
          case AND:
            jj_consume_token(AND);
            break;
          case XOR:
            jj_consume_token(XOR);
            break;
          case 95:
            jj_consume_token(95);
            break;
          case 91:
            jj_consume_token(91);
            break;
          case 92:
            jj_consume_token(92);
            break;
          default:
            jj_la1[81] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            CompleteIdentifier();
            break;
          case MAX:
          case MIN:
            BuiltInFunctions();
            jj_consume_token(82);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IDENTIFIER:
              CompleteIdentifier();
              label_26:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case 85:
                  ;
                  break;
                default:
                  jj_la1[82] = jj_gen;
                  break label_26;
                }
                jj_consume_token(85);
                CompleteIdentifier();
              }
              break;
            default:
              jj_la1[83] = jj_gen;
              ;
            }
            jj_consume_token(83);
            break;
          default:
            jj_la1[84] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[85] = jj_gen;
          ;
        }
        jj_consume_token(75);
        break;
      default:
        jj_la1[86] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void FixedPointProperties() throws ParseException {
 /*@bgen(jjtree) FixedPointProperties */
  SimpleNode jjtn000 = new SimpleNode(JJTFIXEDPOINTPROPERTIES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OVERFLOW:
        jj_consume_token(OVERFLOW);
        break;
      case ROUND:
        jj_consume_token(ROUND);
        break;
      default:
        jj_la1[87] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ValuesFixedPointProperties() throws ParseException {
 /*@bgen(jjtree) ValuesFixedPointProperties */
  SimpleNode jjtn000 = new SimpleNode(JJTVALUESFIXEDPOINTPROPERTIES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WRAP:
        jj_consume_token(WRAP);
        break;
      case FLOOR:
        jj_consume_token(FLOOR);
        break;
      default:
        jj_la1[88] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void SetOfJPs() throws ParseException {
 /*@bgen(jjtree) SetOfJPs */
  SimpleNode jjtn000 = new SimpleNode(JJTSETOFJPS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      case 87:
        jj_consume_token(87);
        jj_consume_token(IDENTIFIER);
        label_27:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 85:
            ;
            break;
          default:
            jj_la1[89] = jj_gen;
            break label_27;
          }
          jj_consume_token(85);
          jj_consume_token(IDENTIFIER);
        }
        jj_consume_token(88);
        break;
      default:
        jj_la1[90] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void JPList() throws ParseException {
 /*@bgen(jjtree) JPList */
  SimpleNode jjtn000 = new SimpleNode(JJTJPLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case 96:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 96:
          jj_consume_token(96);
          break;
        default:
          jj_la1[91] = jj_gen;
          ;
        }
        jj_consume_token(IDENTIFIER);
        break;
      case END:
        jj_consume_token(END);
        break;
      case IF:
        jj_consume_token(IF);
        break;
      case ELSE:
        jj_consume_token(ELSE);
        break;
      default:
        jj_la1[92] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_28:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 85:
          ;
          break;
        default:
          jj_la1[93] = jj_gen;
          break label_28;
        }
        jj_consume_token(85);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
        case 96:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 96:
            jj_consume_token(96);
            break;
          default:
            jj_la1[94] = jj_gen;
            ;
          }
          jj_consume_token(IDENTIFIER);
          break;
        case END:
          jj_consume_token(END);
          break;
        case IF:
          jj_consume_token(IF);
          break;
        case ELSE:
          jj_consume_token(ELSE);
          break;
        default:
          jj_la1[95] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void DependentStmt() throws ParseException {
 /*@bgen(jjtree) DependentStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTDEPENDENTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOREACH);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KEY:
        jj_consume_token(KEY);
        break;
      case TAG:
        jj_consume_token(TAG);
        break;
      case VAR:
        jj_consume_token(VAR);
        break;
      default:
        jj_la1[96] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[97] = jj_gen;
        ;
      }
      jj_consume_token(IN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION:
      case PROGRAM:
      case IDENTIFIER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          jj_consume_token(IDENTIFIER);
          break;
        case FUNCTION:
        case PROGRAM:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PROGRAM:
            jj_consume_token(PROGRAM);
            break;
          case FUNCTION:
            jj_consume_token(FUNCTION);
            break;
          default:
            jj_la1[98] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 74:
            jj_consume_token(74);
            jj_consume_token(IDENTIFIER);
            break;
          default:
            jj_la1[99] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[100] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case 87:
        jj_consume_token(87);
        JPList();
        jj_consume_token(88);
        break;
      default:
        jj_la1[101] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(DO);
      label_29:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INSERT:
          Insert();
          break;
        case SET:
          Set();
          break;
        default:
          jj_la1[102] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SET:
        case INSERT:
          ;
          break;
        default:
          jj_la1[103] = jj_gen;
          break label_29;
        }
      }
      jj_consume_token(END);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void OpsForConfigRules() throws ParseException {
 /*@bgen(jjtree) OpsForConfigRules */
  SimpleNode jjtn000 = new SimpleNode(JJTOPSFORCONFIGRULES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STRING);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Decompose() throws ParseException {
 /*@bgen(jjtree) Decompose */
  SimpleNode jjtn000 = new SimpleNode(JJTDECOMPOSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DECOMPOSE);
      jj_consume_token(TARGETCODE);
      jj_consume_token(75);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Fixed() throws ParseException {
 /*@bgen(jjtree) Fixed */
  SimpleNode jjtn000 = new SimpleNode(JJTFIXED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FIXED);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 76:
        jj_consume_token(76);
        jj_consume_token(NUMBER);
        jj_consume_token(85);
        jj_consume_token(NUMBER);
        jj_consume_token(85);
        jj_consume_token(NUMBER);
        jj_consume_token(77);
        break;
      default:
        jj_la1[104] = jj_gen;
        ;
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void CompleteIdentifier() throws ParseException {
 /*@bgen(jjtree) CompleteIdentifier */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPLETEIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 89:
        jj_consume_token(89);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          jj_consume_token(IDENTIFIER);
          break;
        case MAX:
        case MIN:
          BuiltInFunctions();
          break;
        default:
          jj_la1[105] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[106] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void BuiltInFunctions() throws ParseException {
 /*@bgen(jjtree) BuiltInFunctions */
  SimpleNode jjtn000 = new SimpleNode(JJTBUILTINFUNCTIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAX:
        jj_consume_token(MAX);
        break;
      case MIN:
        jj_consume_token(MIN);
        break;
      default:
        jj_la1[107] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public SimpleNode Expression() throws ParseException {
 /*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expr1();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Expr1() throws ParseException {
    Expr2(1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 91:
    case 92:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 91:
        jj_consume_token(91);
            SimpleNode jjtn001 = new SimpleNode(JJTADD);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
        try {
          Expr2(1);
        } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
        } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
            }
        }
        break;
      case 92:
        jj_consume_token(92);
          SimpleNode jjtn002 = new SimpleNode(JJTSUB);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        try {
          Expr2(1);
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
          }
        }
        break;
      default:
        jj_la1[108] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[109] = jj_gen;
      ;
    }
  }

  static final public void Expr2(int sign) throws ParseException {
    Expr3(sign);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 95:
    case 97:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        jj_consume_token(95);
          SimpleNode jjtn001 = new SimpleNode(JJTMUL);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
          Expr3(1);
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
        break;
      case 97:
        jj_consume_token(97);
        SimpleNode jjtn002 = new SimpleNode(JJTDIV);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        try {
          Expr3(1);
        } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte002;}
        }
        if (jjte002 instanceof ParseException) {
          {if (true) throw (ParseException)jjte002;}
        }
        {if (true) throw (Error)jjte002;}
        } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  2);
        }
        }
        break;
      default:
        jj_la1[110] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[111] = jj_gen;
      ;
    }
  }

  static final public void Expr3(int sign) throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      t = jj_consume_token(NUMBER);
    SimpleNode jjtn001 = new SimpleNode(JJTTERM);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
    jjtn001.val = sign * Integer.parseInt(t.image);
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
      break;
    case 92:
      jj_consume_token(92);
      Expr3(- 1);
      break;
    case 82:
      jj_consume_token(82);
      Expr1();
      jj_consume_token(83);
      break;
    default:
      jj_la1[112] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CalculatorTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[113];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x80,0x0,0x900100,0x900100,0xa0000000,0x900100,0x0,0x0,0x20000000,0x0,0x40000000,0x0,0x40000000,0x40000000,0xe0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x100,0x0,0x100000,0x0,0x18000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x900100,0x80000000,0x0,0x0,0x2000,0x900100,0x84000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x600000,0x40000000,0x40000000,0x40000000,0x40000000,0x0,0x0,0x0,0x600000,0x0,0x0,0x600000,0xe00,0x0,0x0,0x600000,0xe00,0x40000000,0x18000000,0x6000000,0x0,0x0,0x0,0x8000,0x0,0x0,0x8000,0xe0000,0x0,0x0,0x0,0x0,0x0,0x100000,0x100000,0x0,0x600000,0x0,0x600000,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1000,0x0,0x0,0x1,0x400060,0x400060,0x0,0x40,0x0,0x1c000,0x0,0x4,0x0,0x0,0x20,0x20,0x0,0x0,0x280000,0x0,0x0,0x280000,0x280000,0x0,0x40,0x0,0x2000,0x40,0x980,0x0,0x0,0x1c000,0x0,0xff800000,0x0,0x800000,0x180000,0x0,0x2000,0x40,0x8,0x0,0x10,0x1,0x40,0x180000,0x0,0x0,0x0,0x0,0x0,0x0,0x60000,0x0,0x1c000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xff800000,0xff800600,0x4,0x0,0x0,0x0,0x0,0x20,0x20,0x20,0x20,0x2,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x22,0x0,0x0,0x22,0x0,0x0,0x280000,0x0,0x280000,0x280000,0x40,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0xf000,0x18,0x0,0x10,0x10,0x200000,0x10,0x10,0x0,0x10,0x0,0x10000,0x400,0x10,0x10,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x18,0x200000,0x800013,0x200000,0x10,0x0,0x0,0x0,0x0,0x0,0x200000,0x0,0x200000,0x0,0x0,0x200000,0x110,0x200000,0x4001190,0x41000,0x90,0x0,0x200000,0x18,0x1000,0x1000,0x400,0x400,0x4001190,0x10,0x2000000,0x18000000,0x3,0x3,0x10,0x6000f000,0x200000,0x10,0x10,0x10,0x10,0x10,0x10,0x0,0x200000,0x10,0x10,0x200000,0x10,0x10,0x98000000,0x200000,0x10,0x10,0x98000000,0x10,0x0,0x0,0x200000,0x800010,0x0,0x10,0x200000,0x0,0x10,0x0,0x10,0x0,0x400,0x10,0x800010,0x0,0x0,0x1000,0x10,0x2000000,0x0,0x18000000,0x18000000,0x80000000,0x80000000,0x10040100,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,};
   }

  /** Constructor with InputStream. */
  public Calculator(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Calculator(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CalculatorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 113; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 113; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Calculator(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CalculatorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 113; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 113; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Calculator(CalculatorTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 113; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CalculatorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 113; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[98];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 113; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 98; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
